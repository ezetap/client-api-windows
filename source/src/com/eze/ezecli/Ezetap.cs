// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace com.eze.ezecli {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Ezetap {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_ApiInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ApiInput, global::com.eze.ezecli.ApiInput.Builder> internal__static_com_eze_ezecli_ApiInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_ApiOutput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ApiOutput, global::com.eze.ezecli.ApiOutput.Builder> internal__static_com_eze_ezecli_ApiOutput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_ChangePasswordInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ChangePasswordInput, global::com.eze.ezecli.ChangePasswordInput.Builder> internal__static_com_eze_ezecli_ChangePasswordInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_ForwardReceiptInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ForwardReceiptInput, global::com.eze.ezecli.ForwardReceiptInput.Builder> internal__static_com_eze_ezecli_ForwardReceiptInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_LoginInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.LoginInput, global::com.eze.ezecli.LoginInput.Builder> internal__static_com_eze_ezecli_LoginInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_LoginOutput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.LoginOutput, global::com.eze.ezecli.LoginOutput.Builder> internal__static_com_eze_ezecli_LoginOutput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_ProgressInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ProgressInfo, global::com.eze.ezecli.ProgressInfo.Builder> internal__static_com_eze_ezecli_ProgressInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_SignatureInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.SignatureInput, global::com.eze.ezecli.SignatureInput.Builder> internal__static_com_eze_ezecli_SignatureInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_StatusInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.StatusInfo, global::com.eze.ezecli.StatusInfo.Builder> internal__static_com_eze_ezecli_StatusInfo__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_TxnDetailsInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnDetailsInput, global::com.eze.ezecli.TxnDetailsInput.Builder> internal__static_com_eze_ezecli_TxnDetailsInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_TxnHistoryInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnHistoryInput, global::com.eze.ezecli.TxnHistoryInput.Builder> internal__static_com_eze_ezecli_TxnHistoryInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_TxnHistory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnHistory, global::com.eze.ezecli.TxnHistory.Builder> internal__static_com_eze_ezecli_TxnHistory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_TxnHistory_SummaryItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnHistory.Types.SummaryItem, global::com.eze.ezecli.TxnHistory.Types.SummaryItem.Builder> internal__static_com_eze_ezecli_TxnHistory_SummaryItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_TxnInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnInput, global::com.eze.ezecli.TxnInput.Builder> internal__static_com_eze_ezecli_TxnInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_Txn__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.Txn, global::com.eze.ezecli.Txn.Builder> internal__static_com_eze_ezecli_Txn__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_TxnStatusInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnStatusInput, global::com.eze.ezecli.TxnStatusInput.Builder> internal__static_com_eze_ezecli_TxnStatusInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_VoidTxnInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.VoidTxnInput, global::com.eze.ezecli.VoidTxnInput.Builder> internal__static_com_eze_ezecli_VoidTxnInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_ServerTypeInput__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ServerTypeInput, global::com.eze.ezecli.ServerTypeInput.Builder> internal__static_com_eze_ezecli_ServerTypeInput__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_com_eze_ezecli_AppInfo__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.AppInfo, global::com.eze.ezecli.AppInfo.Builder> internal__static_com_eze_ezecli_AppInfo__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Ezetap() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "CgxlemV0YXAucHJvdG8SDmNvbS5lemUuZXplY2xpIvgCCghBcGlJbnB1dBI1" + 
          "Cgdtc2dUeXBlGAEgAigOMiQuY29tLmV6ZS5lemVjbGkuQXBpSW5wdXQuTWVz" + 
          "c2FnZVR5cGUSDwoHbXNnRGF0YRgCIAEoDCKjAgoLTWVzc2FnZVR5cGUSCAoE" + 
          "RVhJVBAAEgkKBUxPR0lOEAESBwoDVFhOEAISEgoOUFJFUEFSRV9ERVZJQ0UQ" + 
          "AxIUChBBVFRBQ0hfU0lHTkFUVVJFEAQSDwoLVFhOX0hJU1RPUlkQBRIMCghW" + 
          "T0lEX1RYThAGEhMKD0ZPUldBUkRfUkVDRUlQVBAHEg4KClRYTl9TVEFUVVMQ" + 
          "CBITCg9DSEFOR0VfUEFTU1dPUkQQCRIKCgZMT0dPVVQQChIPCgtUWE5fREVU" + 
          "QUlMUxALEhIKDlNFUlZFUkFQSV9JTkZPEAwSDwoLU0VSVkVSX1RZUEUQDRIM" + 
          "CghBUFBfSU5GTxBhEhAKDEVOQUJMRV9ERUJVRxBiEhEKDURJU0FCTEVfREVC" + 
          "VUcQYyK6CQoJQXBpT3V0cHV0EjYKCWV2ZW50VHlwZRgBIAIoDjIjLmNvbS5l" + 
          "emUuZXplY2xpLkFwaU91dHB1dC5FdmVudFR5cGUSNgoGc3RhdHVzGAIgAigO" + 
          "MiYuY29tLmV6ZS5lemVjbGkuQXBpT3V0cHV0LlJlc3VsdFN0YXR1cxIPCgdt" + 
          "c2dUZXh0GAMgASgJEg8KB291dERhdGEYBCABKAwSQAoMbm90aWZpY2F0aW9u" + 
          "GAUgASgOMiouY29tLmV6ZS5lemVjbGkuQXBpT3V0cHV0Lk5vdGlmaWNhdGlv" + 
          "blR5cGUiKAoMUmVzdWx0U3RhdHVzEgsKB1NVQ0NFU1MQABILCgdGQUlMVVJF" + 
          "EAEi8QIKCUV2ZW50VHlwZRIQCgxMT0dJTl9SRVNVTFQQABIRCg1MT0dPVVRf" + 
          "UkVTVUxUEAESDgoKVFhOX1JFU1VMVBACEhkKFVBSRVBBUkVfREVWSUNFX1JF" + 
          "U1VMVBADEhsKF0FUVEFDSF9TSUdOQVRVUkVfUkVTVUxUEAQSFgoSVFhOX0hJ" + 
          "U1RPUllfUkVTVUxUEAUSEwoPVk9JRF9UWE5fUkVTVUxUEAYSGgoWRk9SV0FS" + 
          "RF9SRUNFSVBUX1JFU1VMVBAHEhUKEVRYTl9TVEFUVVNfUkVTVUxUEAgSGgoW" + 
          "Q0hBTkdFX1BBU1NXT1JEX1JFU1VMVBAJEhYKElRYTl9ERVRBSUxTX1JFU1VM" + 
          "VBAKEhAKDEFQSV9QUk9HUkVTUxALEhQKEEFQSV9OT1RJRklDQVRJT04QDBIU" + 
          "ChBTRVJWRVJBUElfUkVTVUxUEA0SFAoQU0VUU0VSVkVSX1JFU1VMVBAOEg8K" + 
          "C0VYSVRfUkVTVUxUEGMiugQKEE5vdGlmaWNhdGlvblR5cGUSGwoXRVBJQ19J" + 
          "REVOVElGWUlOR19ERVZJQ0UQARIaChZFUElDX1ZBTElEQVRJTkdfREVWSUNF" + 
          "EAISGQoVRVBJQ19QUkVQQVJJTkdfREVWSUNFEAMSGgoWRVBJQ19QUkVQQVJJ" + 
          "TkdfRk9SX1RYThAEEh0KGUVQSUNfU1dJUEVfT1JfSU5TRVJUX0NBUkQQBRIV" + 
          "ChFFUElDX1JFQURJTkdfREFUQRAGEhgKFEVQSUNfVFhOX0lOX1BST0dSRVNT" + 
          "EAcSEgoORVBJQ19FTlRFUl9QSU4QCBIUChBFUElDX1BJTl9FTlRFUkVEEAkS" + 
          "IAocRVBJQ19TRVJWRVJfQVVUSF9JTl9QUk9HUkVTUxAKEiAKHEVQSUNfREVW" + 
          "SUNFX0FVVEhfSU5fUFJPR1JFU1MQCxIXChNFUElDX1RYTl9URVJNSU5BVEVE" + 
          "EAwSGQoVRVBJQ19UWE5fTk9UX0FDQ0VQVEVEEA0SGQoVRVBJQ19VTlNVUFBP" + 
          "UlRFRF9DQVJEEA4SGwoXRVBJQ19DQVJEX05PVF9TVVBQT1JURUQQDxIVChFF" + 
          "UElDX0NBUkRfQkxPQ0tFRBAQEhYKEkVQSUNfQ0hJUF9OT1RfUkVBRBAREhYK" + 
          "EkVQSUNfVVNFX0NISVBfQ0FSRBASEhIKDkVQSUNfV1JPTkdfUElOEBMSGwoX" + 
          "RVBJQ19QSU5fTUVUSE9EX0JMT0NLRUQQFBIUChBFUElDX0VYUElSRURfQVBQ" + 
          "EBUiQwoTQ2hhbmdlUGFzc3dvcmRJbnB1dBIXCg9jdXJyZW50UGFzc3dvcmQY" + 
          "ASACKAkSEwoLbmV3UGFzc3dvcmQYAiACKAkiUwoTRm9yd2FyZFJlY2VpcHRJ" + 
          "bnB1dBINCgV0eG5JZBgBIAIoCRIWCg5jdXN0b21lck1vYmlsZRgCIAEoCRIV" + 
          "Cg1jdXN0b21lckVtYWlsGAMgASgJIo8BCgpMb2dpbklucHV0EjcKCWxvZ2lu" + 
          "TW9kZRgBIAIoDjIkLmNvbS5lemUuZXplY2xpLkxvZ2luSW5wdXQuTG9naW5N" + 
          "b2RlEhAKCHVzZXJuYW1lGAIgAigJEg8KB3Bhc3NrZXkYAyACKAkiJQoJTG9n" + 
          "aW5Nb2RlEgwKCFBBU1NXT1JEEAASCgoGQVBQS0VZEAEiMwoLTG9naW5PdXRw" + 
          "dXQSEgoKc2Vzc2lvbktleRgBIAEoCRIQCghzZXR0aW5ncxgCIAEoCSI6CgxQ" + 
          "cm9ncmVzc0luZm8SFgoOc3RlcHNDb21wbGV0ZWQYASACKAUSEgoKdG90YWxT" + 
          "dGVwcxgCIAIoBSLUAQoOU2lnbmF0dXJlSW5wdXQSDQoFdHhuSWQYASACKAkS" + 
          "OwoJaW1hZ2VUeXBlGAIgAigOMiguY29tLmV6ZS5lemVjbGkuU2lnbmF0dXJl" + 
          "SW5wdXQuSW1hZ2VUeXBlEhIKCmltYWdlQnl0ZXMYAyACKAwSDgoGaGVpZ2h0" + 
          "GAQgASgFEg0KBXdpZHRoGAUgASgFEhEKCXRpcEFtb3VudBgGIAEoASIwCglJ" + 
          "bWFnZVR5cGUSBwoDUE5HEAASBwoDR0lGEAESCAoESlBFRxACEgcKA0JNUBAD" + 
          "IisKClN0YXR1c0luZm8SDAoEY29kZRgBIAIoCRIPCgdtZXNzYWdlGAIgAigJ" + 
          "IiAKD1R4bkRldGFpbHNJbnB1dBINCgV0eG5JZBgBIAIoCSI0Cg9UeG5IaXN0" + 
          "b3J5SW5wdXQSEAoIc3RydERhdGUYASACKAkSDwoHZW5kRGF0ZRgCIAIoCSLr" + 
          "AQoKVHhuSGlzdG9yeRISCgp0b3RhbENvdW50GAEgAigFEhEKCW5ldEFtb3Vu" + 
          "dBgCIAIoARIYChBzdW1tYXJ5SXRlbUNvdW50GAMgAigFEjwKDHN1bW1hcnlJ" + 
          "dGVtcxgEIAMoCzImLmNvbS5lemUuZXplY2xpLlR4bkhpc3RvcnkuU3VtbWFy" + 
          "eUl0ZW0SIQoEdHhucxgFIAMoCzITLmNvbS5lemUuZXplY2xpLlR4bho7CgtT" + 
          "dW1tYXJ5SXRlbRINCgV0aXRsZRgBIAIoCRINCgVjb3VudBgCIAIoBRIOCgZh" + 
          "bW91bnQYAyACKAEirgMKCFR4bklucHV0EjEKB3R4blR5cGUYASACKA4yIC5j" + 
          "b20uZXplLmV6ZWNsaS5UeG5JbnB1dC5UeG5UeXBlEg4KBmFtb3VudBgCIAIo" + 
          "ARIPCgdvcmRlcklkGAMgASgJEg0KBW5vbmNlGAQgASgJEhYKDmN1c3RvbWVy" + 
          "TW9iaWxlGAUgASgJEhUKDWN1c3RvbWVyRW1haWwYBiABKAkSGgoSZXh0ZXJu" + 
          "YWxSZWZlcmVuY2UyGAcgASgJEhoKEmV4dGVybmFsUmVmZXJlbmNlMxgIIAEo" + 
          "CRITCgthbW91bnRPdGhlchgJIAEoARIUCgxjaGVxdWVOdW1iZXIYCiABKAkS" + 
          "EAoIYmFua0NvZGUYCyABKAkSEgoKY2hlcXVlRGF0ZRgMIAEoCRIWCg5hZGRp" + 
          "dGlvbmFsRGF0YRgNIAEoCRIUCgxyZWNlaXB0X3R5cGUYDiABKAkiWQoHVHhu" + 
          "VHlwZRINCglDQVJEX0FVVEgQABIRCg1DQVJEX1BSRV9BVVRIEAESFgoSQ0FS" + 
          "RF9QUkVfQVVUSF9DT05GEAISCAoEQ0FTSBADEgoKBkNIRVFVRRAEIqoFCgNU" + 
          "eG4SLAoHdHhuVHlwZRgBIAIoDjIbLmNvbS5lemUuZXplY2xpLlR4bi5UeG5U" + 
          "eXBlEg4KBmFtb3VudBgCIAIoARIVCg10cmFuc2FjdGlvbklkGAMgAigJEhEK" + 
          "CXRpbWVzdGFtcBgEIAIoCRISCgpyZWNlaXB0VXJsGAUgAigJEg8KB29yZGVy" + 
          "SWQYBiACKAkSIAoYZXh0ZXJuYWxSZWZlcmVuY2VOdW1iZXIyGAcgAigJEiAK" + 
          "GGV4dGVybmFsUmVmZXJlbmNlTnVtYmVyMxgIIAIoCRIcChRjdXN0b21lck1v" + 
          "YmlsZU51bWJlchgJIAIoCRIUCgxjdXN0b21lck5hbWUYCiACKAkSDgoGc3Rh" + 
          "dHVzGAsgAigJEhUKDXVzZXJBZ3JlZW1lbnQYDCABKAkSEAoIYXV0aENvZGUY" + 
          "DSABKAkSFwoPbGFzdEZvdW5kRGlnaXRzGA4gASgJEhEKCWNhcmRCcmFuZBgP" + 
          "IAEoCRIVCg1pbnZvaWNlTnVtYmVyGBAgASgJEhMKC2JhdGNoTnVtYmVyGBEg" + 
          "ASgJEgsKA21pZBgSIAEoCRILCgN0aWQYEyABKAkSGAoQcmV2ZXJzZVJlZk51" + 
          "bWJlchgUIAEoCRIUCgxjaGVxdWVOdW1iZXIYFSABKAkSEAoIYmFua0NvZGUY" + 
          "FiABKAkSEgoKY2hlcXVlRGF0ZRgXIAEoCRIYChBzZXR0bGVtZW50U3RhdHVz" + 
          "GBggASgJEhAKCHZvaWRhYmxlGBkgASgIEhYKDnNlcnZlclJlc3BvbnNlGBog" + 
          "ASgJIlkKB1R4blR5cGUSDQoJQ0FSRF9BVVRIEAASEQoNQ0FSRF9QUkVfQVVU" + 
          "SBABEhYKEkNBUkRfUFJFX0FVVEhfQ09ORhACEggKBENBU0gQAxIKCgZDSEVR" + 
          "VUUQBCIfCg5UeG5TdGF0dXNJbnB1dBINCgVub25jZRgBIAIoCSIdCgxWb2lk" + 
          "VHhuSW5wdXQSDQoFdHhuSWQYASACKAkiiwEKD1NlcnZlclR5cGVJbnB1dBI+" + 
          "CgpzZXJ2ZXJ0eXBlGAEgAigOMiouY29tLmV6ZS5lemVjbGkuU2VydmVyVHlw" + 
          "ZUlucHV0LlNlcnZlclR5cGUiOAoKU2VydmVyVHlwZRIUChBTRVJWRVJfVFlQ" + 
          "RV9ERU1PEAASFAoQU0VSVkVSX1RZUEVfUFJPRBABIi4KB0FwcEluZm8SDwoH" + 
          "YXBwbmFtZRgBIAIoCRISCgphcHB2ZXJzaW9uGAIgAigJQhIKDmNvbS5lemUu" + 
          "ZXplY2xpUAE=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_com_eze_ezecli_ApiInput__Descriptor = Descriptor.MessageTypes[0];
        internal__static_com_eze_ezecli_ApiInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ApiInput, global::com.eze.ezecli.ApiInput.Builder>(internal__static_com_eze_ezecli_ApiInput__Descriptor,
                new string[] { "MsgType", "MsgData", });
        internal__static_com_eze_ezecli_ApiOutput__Descriptor = Descriptor.MessageTypes[1];
        internal__static_com_eze_ezecli_ApiOutput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ApiOutput, global::com.eze.ezecli.ApiOutput.Builder>(internal__static_com_eze_ezecli_ApiOutput__Descriptor,
                new string[] { "EventType", "Status", "MsgText", "OutData", "Notification", });
        internal__static_com_eze_ezecli_ChangePasswordInput__Descriptor = Descriptor.MessageTypes[2];
        internal__static_com_eze_ezecli_ChangePasswordInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ChangePasswordInput, global::com.eze.ezecli.ChangePasswordInput.Builder>(internal__static_com_eze_ezecli_ChangePasswordInput__Descriptor,
                new string[] { "CurrentPassword", "NewPassword", });
        internal__static_com_eze_ezecli_ForwardReceiptInput__Descriptor = Descriptor.MessageTypes[3];
        internal__static_com_eze_ezecli_ForwardReceiptInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ForwardReceiptInput, global::com.eze.ezecli.ForwardReceiptInput.Builder>(internal__static_com_eze_ezecli_ForwardReceiptInput__Descriptor,
                new string[] { "TxnId", "CustomerMobile", "CustomerEmail", });
        internal__static_com_eze_ezecli_LoginInput__Descriptor = Descriptor.MessageTypes[4];
        internal__static_com_eze_ezecli_LoginInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.LoginInput, global::com.eze.ezecli.LoginInput.Builder>(internal__static_com_eze_ezecli_LoginInput__Descriptor,
                new string[] { "LoginMode", "Username", "Passkey", });
        internal__static_com_eze_ezecli_LoginOutput__Descriptor = Descriptor.MessageTypes[5];
        internal__static_com_eze_ezecli_LoginOutput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.LoginOutput, global::com.eze.ezecli.LoginOutput.Builder>(internal__static_com_eze_ezecli_LoginOutput__Descriptor,
                new string[] { "SessionKey", "Settings", });
        internal__static_com_eze_ezecli_ProgressInfo__Descriptor = Descriptor.MessageTypes[6];
        internal__static_com_eze_ezecli_ProgressInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ProgressInfo, global::com.eze.ezecli.ProgressInfo.Builder>(internal__static_com_eze_ezecli_ProgressInfo__Descriptor,
                new string[] { "StepsCompleted", "TotalSteps", });
        internal__static_com_eze_ezecli_SignatureInput__Descriptor = Descriptor.MessageTypes[7];
        internal__static_com_eze_ezecli_SignatureInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.SignatureInput, global::com.eze.ezecli.SignatureInput.Builder>(internal__static_com_eze_ezecli_SignatureInput__Descriptor,
                new string[] { "TxnId", "ImageType", "ImageBytes", "Height", "Width", "TipAmount", });
        internal__static_com_eze_ezecli_StatusInfo__Descriptor = Descriptor.MessageTypes[8];
        internal__static_com_eze_ezecli_StatusInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.StatusInfo, global::com.eze.ezecli.StatusInfo.Builder>(internal__static_com_eze_ezecli_StatusInfo__Descriptor,
                new string[] { "Code", "Message", });
        internal__static_com_eze_ezecli_TxnDetailsInput__Descriptor = Descriptor.MessageTypes[9];
        internal__static_com_eze_ezecli_TxnDetailsInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnDetailsInput, global::com.eze.ezecli.TxnDetailsInput.Builder>(internal__static_com_eze_ezecli_TxnDetailsInput__Descriptor,
                new string[] { "TxnId", });
        internal__static_com_eze_ezecli_TxnHistoryInput__Descriptor = Descriptor.MessageTypes[10];
        internal__static_com_eze_ezecli_TxnHistoryInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnHistoryInput, global::com.eze.ezecli.TxnHistoryInput.Builder>(internal__static_com_eze_ezecli_TxnHistoryInput__Descriptor,
                new string[] { "StrtDate", "EndDate", });
        internal__static_com_eze_ezecli_TxnHistory__Descriptor = Descriptor.MessageTypes[11];
        internal__static_com_eze_ezecli_TxnHistory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnHistory, global::com.eze.ezecli.TxnHistory.Builder>(internal__static_com_eze_ezecli_TxnHistory__Descriptor,
                new string[] { "TotalCount", "NetAmount", "SummaryItemCount", "SummaryItems", "Txns", });
        internal__static_com_eze_ezecli_TxnHistory_SummaryItem__Descriptor = internal__static_com_eze_ezecli_TxnHistory__Descriptor.NestedTypes[0];
        internal__static_com_eze_ezecli_TxnHistory_SummaryItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnHistory.Types.SummaryItem, global::com.eze.ezecli.TxnHistory.Types.SummaryItem.Builder>(internal__static_com_eze_ezecli_TxnHistory_SummaryItem__Descriptor,
                new string[] { "Title", "Count", "Amount", });
        internal__static_com_eze_ezecli_TxnInput__Descriptor = Descriptor.MessageTypes[12];
        internal__static_com_eze_ezecli_TxnInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnInput, global::com.eze.ezecli.TxnInput.Builder>(internal__static_com_eze_ezecli_TxnInput__Descriptor,
                new string[] { "TxnType", "Amount", "OrderId", "Nonce", "CustomerMobile", "CustomerEmail", "ExternalReference2", "ExternalReference3", "AmountOther", "ChequeNumber", "BankCode", "ChequeDate", "AdditionalData", "ReceiptType", });
        internal__static_com_eze_ezecli_Txn__Descriptor = Descriptor.MessageTypes[13];
        internal__static_com_eze_ezecli_Txn__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.Txn, global::com.eze.ezecli.Txn.Builder>(internal__static_com_eze_ezecli_Txn__Descriptor,
                new string[] { "TxnType", "Amount", "TransactionId", "Timestamp", "ReceiptUrl", "OrderId", "ExternalReferenceNumber2", "ExternalReferenceNumber3", "CustomerMobileNumber", "CustomerName", "Status", "UserAgreement", "AuthCode", "LastFoundDigits", "CardBrand", "InvoiceNumber", "BatchNumber", "Mid", "Tid", "ReverseRefNumber", "ChequeNumber", "BankCode", "ChequeDate", "SettlementStatus", "Voidable", "ServerResponse", });
        internal__static_com_eze_ezecli_TxnStatusInput__Descriptor = Descriptor.MessageTypes[14];
        internal__static_com_eze_ezecli_TxnStatusInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.TxnStatusInput, global::com.eze.ezecli.TxnStatusInput.Builder>(internal__static_com_eze_ezecli_TxnStatusInput__Descriptor,
                new string[] { "Nonce", });
        internal__static_com_eze_ezecli_VoidTxnInput__Descriptor = Descriptor.MessageTypes[15];
        internal__static_com_eze_ezecli_VoidTxnInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.VoidTxnInput, global::com.eze.ezecli.VoidTxnInput.Builder>(internal__static_com_eze_ezecli_VoidTxnInput__Descriptor,
                new string[] { "TxnId", });
        internal__static_com_eze_ezecli_ServerTypeInput__Descriptor = Descriptor.MessageTypes[16];
        internal__static_com_eze_ezecli_ServerTypeInput__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.ServerTypeInput, global::com.eze.ezecli.ServerTypeInput.Builder>(internal__static_com_eze_ezecli_ServerTypeInput__Descriptor,
                new string[] { "Servertype", });
        internal__static_com_eze_ezecli_AppInfo__Descriptor = Descriptor.MessageTypes[17];
        internal__static_com_eze_ezecli_AppInfo__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::com.eze.ezecli.AppInfo, global::com.eze.ezecli.AppInfo.Builder>(internal__static_com_eze_ezecli_AppInfo__Descriptor,
                new string[] { "Appname", "Appversion", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ApiInput : pb::GeneratedMessage<ApiInput, ApiInput.Builder> {
    private ApiInput() { }
    private static readonly ApiInput defaultInstance = new ApiInput().MakeReadOnly();
    private static readonly string[] _apiInputFieldNames = new string[] { "msgData", "msgType" };
    private static readonly uint[] _apiInputFieldTags = new uint[] { 18, 8 };
    public static ApiInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ApiInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ApiInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ApiInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ApiInput, ApiInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ApiInput__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MessageType {
        EXIT = 0,
        LOGIN = 1,
        TXN = 2,
        PREPARE_DEVICE = 3,
        ATTACH_SIGNATURE = 4,
        TXN_HISTORY = 5,
        VOID_TXN = 6,
        FORWARD_RECEIPT = 7,
        TXN_STATUS = 8,
        CHANGE_PASSWORD = 9,
        LOGOUT = 10,
        TXN_DETAILS = 11,
        SERVERAPI_INFO = 12,
        SERVER_TYPE = 13,
        APP_INFO = 97,
        ENABLE_DEBUG = 98,
        DISABLE_DEBUG = 99,
      }
      
    }
    #endregion
    
    public const int MsgTypeFieldNumber = 1;
    private bool hasMsgType;
    private global::com.eze.ezecli.ApiInput.Types.MessageType msgType_ = global::com.eze.ezecli.ApiInput.Types.MessageType.EXIT;
    public bool HasMsgType {
      get { return hasMsgType; }
    }
    public global::com.eze.ezecli.ApiInput.Types.MessageType MsgType {
      get { return msgType_; }
    }
    
    public const int MsgDataFieldNumber = 2;
    private bool hasMsgData;
    private pb::ByteString msgData_ = pb::ByteString.Empty;
    public bool HasMsgData {
      get { return hasMsgData; }
    }
    public pb::ByteString MsgData {
      get { return msgData_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMsgType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _apiInputFieldNames;
      if (hasMsgType) {
        output.WriteEnum(1, field_names[1], (int) MsgType, MsgType);
      }
      if (hasMsgData) {
        output.WriteBytes(2, field_names[0], MsgData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMsgType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MsgType);
        }
        if (hasMsgData) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, MsgData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ApiInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ApiInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ApiInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ApiInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ApiInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ApiInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ApiInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ApiInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ApiInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ApiInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ApiInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ApiInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ApiInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ApiInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ApiInput result;
      
      private ApiInput PrepareBuilder() {
        if (resultIsReadOnly) {
          ApiInput original = result;
          result = new ApiInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ApiInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.ApiInput.Descriptor; }
      }
      
      public override ApiInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.ApiInput.DefaultInstance; }
      }
      
      public override ApiInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ApiInput) {
          return MergeFrom((ApiInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ApiInput other) {
        if (other == global::com.eze.ezecli.ApiInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMsgType) {
          MsgType = other.MsgType;
        }
        if (other.HasMsgData) {
          MsgData = other.MsgData;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_apiInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _apiInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.msgType_, out unknown)) {
                result.hasMsgType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasMsgData = input.ReadBytes(ref result.msgData_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMsgType {
       get { return result.hasMsgType; }
      }
      public global::com.eze.ezecli.ApiInput.Types.MessageType MsgType {
        get { return result.MsgType; }
        set { SetMsgType(value); }
      }
      public Builder SetMsgType(global::com.eze.ezecli.ApiInput.Types.MessageType value) {
        PrepareBuilder();
        result.hasMsgType = true;
        result.msgType_ = value;
        return this;
      }
      public Builder ClearMsgType() {
        PrepareBuilder();
        result.hasMsgType = false;
        result.msgType_ = global::com.eze.ezecli.ApiInput.Types.MessageType.EXIT;
        return this;
      }
      
      public bool HasMsgData {
        get { return result.hasMsgData; }
      }
      public pb::ByteString MsgData {
        get { return result.MsgData; }
        set { SetMsgData(value); }
      }
      public Builder SetMsgData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsgData = true;
        result.msgData_ = value;
        return this;
      }
      public Builder ClearMsgData() {
        PrepareBuilder();
        result.hasMsgData = false;
        result.msgData_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ApiInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ApiOutput : pb::GeneratedMessage<ApiOutput, ApiOutput.Builder> {
    private ApiOutput() { }
    private static readonly ApiOutput defaultInstance = new ApiOutput().MakeReadOnly();
    private static readonly string[] _apiOutputFieldNames = new string[] { "eventType", "msgText", "notification", "outData", "status" };
    private static readonly uint[] _apiOutputFieldTags = new uint[] { 8, 26, 40, 34, 16 };
    public static ApiOutput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ApiOutput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ApiOutput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ApiOutput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ApiOutput, ApiOutput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ApiOutput__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ResultStatus {
        SUCCESS = 0,
        FAILURE = 1,
      }
      
      public enum EventType {
        LOGIN_RESULT = 0,
        LOGOUT_RESULT = 1,
        TXN_RESULT = 2,
        PREPARE_DEVICE_RESULT = 3,
        ATTACH_SIGNATURE_RESULT = 4,
        TXN_HISTORY_RESULT = 5,
        VOID_TXN_RESULT = 6,
        FORWARD_RECEIPT_RESULT = 7,
        TXN_STATUS_RESULT = 8,
        CHANGE_PASSWORD_RESULT = 9,
        TXN_DETAILS_RESULT = 10,
        API_PROGRESS = 11,
        API_NOTIFICATION = 12,
        SERVERAPI_RESULT = 13,
        SETSERVER_RESULT = 14,
        EXIT_RESULT = 99,
      }
      
      public enum NotificationType {
        EPIC_IDENTIFYING_DEVICE = 1,
        EPIC_VALIDATING_DEVICE = 2,
        EPIC_PREPARING_DEVICE = 3,
        EPIC_PREPARING_FOR_TXN = 4,
        EPIC_SWIPE_OR_INSERT_CARD = 5,
        EPIC_READING_DATA = 6,
        EPIC_TXN_IN_PROGRESS = 7,
        EPIC_ENTER_PIN = 8,
        EPIC_PIN_ENTERED = 9,
        EPIC_SERVER_AUTH_IN_PROGRESS = 10,
        EPIC_DEVICE_AUTH_IN_PROGRESS = 11,
        EPIC_TXN_TERMINATED = 12,
        EPIC_TXN_NOT_ACCEPTED = 13,
        EPIC_UNSUPPORTED_CARD = 14,
        EPIC_CARD_NOT_SUPPORTED = 15,
        EPIC_CARD_BLOCKED = 16,
        EPIC_CHIP_NOT_READ = 17,
        EPIC_USE_CHIP_CARD = 18,
        EPIC_WRONG_PIN = 19,
        EPIC_PIN_METHOD_BLOCKED = 20,
        EPIC_EXPIRED_APP = 21,
      }
      
    }
    #endregion
    
    public const int EventTypeFieldNumber = 1;
    private bool hasEventType;
    private global::com.eze.ezecli.ApiOutput.Types.EventType eventType_ = global::com.eze.ezecli.ApiOutput.Types.EventType.LOGIN_RESULT;
    public bool HasEventType {
      get { return hasEventType; }
    }
    public global::com.eze.ezecli.ApiOutput.Types.EventType EventType {
      get { return eventType_; }
    }
    
    public const int StatusFieldNumber = 2;
    private bool hasStatus;
    private global::com.eze.ezecli.ApiOutput.Types.ResultStatus status_ = global::com.eze.ezecli.ApiOutput.Types.ResultStatus.SUCCESS;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public global::com.eze.ezecli.ApiOutput.Types.ResultStatus Status {
      get { return status_; }
    }
    
    public const int MsgTextFieldNumber = 3;
    private bool hasMsgText;
    private string msgText_ = "";
    public bool HasMsgText {
      get { return hasMsgText; }
    }
    public string MsgText {
      get { return msgText_; }
    }
    
    public const int OutDataFieldNumber = 4;
    private bool hasOutData;
    private pb::ByteString outData_ = pb::ByteString.Empty;
    public bool HasOutData {
      get { return hasOutData; }
    }
    public pb::ByteString OutData {
      get { return outData_; }
    }
    
    public const int NotificationFieldNumber = 5;
    private bool hasNotification;
    private global::com.eze.ezecli.ApiOutput.Types.NotificationType notification_ = global::com.eze.ezecli.ApiOutput.Types.NotificationType.EPIC_IDENTIFYING_DEVICE;
    public bool HasNotification {
      get { return hasNotification; }
    }
    public global::com.eze.ezecli.ApiOutput.Types.NotificationType Notification {
      get { return notification_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasEventType) return false;
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _apiOutputFieldNames;
      if (hasEventType) {
        output.WriteEnum(1, field_names[0], (int) EventType, EventType);
      }
      if (hasStatus) {
        output.WriteEnum(2, field_names[4], (int) Status, Status);
      }
      if (hasMsgText) {
        output.WriteString(3, field_names[1], MsgText);
      }
      if (hasOutData) {
        output.WriteBytes(4, field_names[3], OutData);
      }
      if (hasNotification) {
        output.WriteEnum(5, field_names[2], (int) Notification, Notification);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEventType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) EventType);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Status);
        }
        if (hasMsgText) {
          size += pb::CodedOutputStream.ComputeStringSize(3, MsgText);
        }
        if (hasOutData) {
          size += pb::CodedOutputStream.ComputeBytesSize(4, OutData);
        }
        if (hasNotification) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Notification);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ApiOutput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ApiOutput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ApiOutput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ApiOutput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ApiOutput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ApiOutput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ApiOutput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ApiOutput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ApiOutput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ApiOutput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ApiOutput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ApiOutput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ApiOutput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ApiOutput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ApiOutput result;
      
      private ApiOutput PrepareBuilder() {
        if (resultIsReadOnly) {
          ApiOutput original = result;
          result = new ApiOutput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ApiOutput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.ApiOutput.Descriptor; }
      }
      
      public override ApiOutput DefaultInstanceForType {
        get { return global::com.eze.ezecli.ApiOutput.DefaultInstance; }
      }
      
      public override ApiOutput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ApiOutput) {
          return MergeFrom((ApiOutput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ApiOutput other) {
        if (other == global::com.eze.ezecli.ApiOutput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventType) {
          EventType = other.EventType;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasMsgText) {
          MsgText = other.MsgText;
        }
        if (other.HasOutData) {
          OutData = other.OutData;
        }
        if (other.HasNotification) {
          Notification = other.Notification;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_apiOutputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _apiOutputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.eventType_, out unknown)) {
                result.hasEventType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.status_, out unknown)) {
                result.hasStatus = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasMsgText = input.ReadString(ref result.msgText_);
              break;
            }
            case 34: {
              result.hasOutData = input.ReadBytes(ref result.outData_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.notification_, out unknown)) {
                result.hasNotification = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasEventType {
       get { return result.hasEventType; }
      }
      public global::com.eze.ezecli.ApiOutput.Types.EventType EventType {
        get { return result.EventType; }
        set { SetEventType(value); }
      }
      public Builder SetEventType(global::com.eze.ezecli.ApiOutput.Types.EventType value) {
        PrepareBuilder();
        result.hasEventType = true;
        result.eventType_ = value;
        return this;
      }
      public Builder ClearEventType() {
        PrepareBuilder();
        result.hasEventType = false;
        result.eventType_ = global::com.eze.ezecli.ApiOutput.Types.EventType.LOGIN_RESULT;
        return this;
      }
      
      public bool HasStatus {
       get { return result.hasStatus; }
      }
      public global::com.eze.ezecli.ApiOutput.Types.ResultStatus Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(global::com.eze.ezecli.ApiOutput.Types.ResultStatus value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = global::com.eze.ezecli.ApiOutput.Types.ResultStatus.SUCCESS;
        return this;
      }
      
      public bool HasMsgText {
        get { return result.hasMsgText; }
      }
      public string MsgText {
        get { return result.MsgText; }
        set { SetMsgText(value); }
      }
      public Builder SetMsgText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsgText = true;
        result.msgText_ = value;
        return this;
      }
      public Builder ClearMsgText() {
        PrepareBuilder();
        result.hasMsgText = false;
        result.msgText_ = "";
        return this;
      }
      
      public bool HasOutData {
        get { return result.hasOutData; }
      }
      public pb::ByteString OutData {
        get { return result.OutData; }
        set { SetOutData(value); }
      }
      public Builder SetOutData(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOutData = true;
        result.outData_ = value;
        return this;
      }
      public Builder ClearOutData() {
        PrepareBuilder();
        result.hasOutData = false;
        result.outData_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasNotification {
       get { return result.hasNotification; }
      }
      public global::com.eze.ezecli.ApiOutput.Types.NotificationType Notification {
        get { return result.Notification; }
        set { SetNotification(value); }
      }
      public Builder SetNotification(global::com.eze.ezecli.ApiOutput.Types.NotificationType value) {
        PrepareBuilder();
        result.hasNotification = true;
        result.notification_ = value;
        return this;
      }
      public Builder ClearNotification() {
        PrepareBuilder();
        result.hasNotification = false;
        result.notification_ = global::com.eze.ezecli.ApiOutput.Types.NotificationType.EPIC_IDENTIFYING_DEVICE;
        return this;
      }
    }
    static ApiOutput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChangePasswordInput : pb::GeneratedMessage<ChangePasswordInput, ChangePasswordInput.Builder> {
    private ChangePasswordInput() { }
    private static readonly ChangePasswordInput defaultInstance = new ChangePasswordInput().MakeReadOnly();
    private static readonly string[] _changePasswordInputFieldNames = new string[] { "currentPassword", "newPassword" };
    private static readonly uint[] _changePasswordInputFieldTags = new uint[] { 10, 18 };
    public static ChangePasswordInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ChangePasswordInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ChangePasswordInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ChangePasswordInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ChangePasswordInput, ChangePasswordInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ChangePasswordInput__FieldAccessorTable; }
    }
    
    public const int CurrentPasswordFieldNumber = 1;
    private bool hasCurrentPassword;
    private string currentPassword_ = "";
    public bool HasCurrentPassword {
      get { return hasCurrentPassword; }
    }
    public string CurrentPassword {
      get { return currentPassword_; }
    }
    
    public const int NewPasswordFieldNumber = 2;
    private bool hasNewPassword;
    private string newPassword_ = "";
    public bool HasNewPassword {
      get { return hasNewPassword; }
    }
    public string NewPassword {
      get { return newPassword_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCurrentPassword) return false;
        if (!hasNewPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _changePasswordInputFieldNames;
      if (hasCurrentPassword) {
        output.WriteString(1, field_names[0], CurrentPassword);
      }
      if (hasNewPassword) {
        output.WriteString(2, field_names[1], NewPassword);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCurrentPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(1, CurrentPassword);
        }
        if (hasNewPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, NewPassword);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ChangePasswordInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChangePasswordInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChangePasswordInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ChangePasswordInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ChangePasswordInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChangePasswordInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ChangePasswordInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ChangePasswordInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ChangePasswordInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ChangePasswordInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ChangePasswordInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ChangePasswordInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ChangePasswordInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ChangePasswordInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ChangePasswordInput result;
      
      private ChangePasswordInput PrepareBuilder() {
        if (resultIsReadOnly) {
          ChangePasswordInput original = result;
          result = new ChangePasswordInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ChangePasswordInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.ChangePasswordInput.Descriptor; }
      }
      
      public override ChangePasswordInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.ChangePasswordInput.DefaultInstance; }
      }
      
      public override ChangePasswordInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ChangePasswordInput) {
          return MergeFrom((ChangePasswordInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ChangePasswordInput other) {
        if (other == global::com.eze.ezecli.ChangePasswordInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentPassword) {
          CurrentPassword = other.CurrentPassword;
        }
        if (other.HasNewPassword) {
          NewPassword = other.NewPassword;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_changePasswordInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _changePasswordInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCurrentPassword = input.ReadString(ref result.currentPassword_);
              break;
            }
            case 18: {
              result.hasNewPassword = input.ReadString(ref result.newPassword_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCurrentPassword {
        get { return result.hasCurrentPassword; }
      }
      public string CurrentPassword {
        get { return result.CurrentPassword; }
        set { SetCurrentPassword(value); }
      }
      public Builder SetCurrentPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentPassword = true;
        result.currentPassword_ = value;
        return this;
      }
      public Builder ClearCurrentPassword() {
        PrepareBuilder();
        result.hasCurrentPassword = false;
        result.currentPassword_ = "";
        return this;
      }
      
      public bool HasNewPassword {
        get { return result.hasNewPassword; }
      }
      public string NewPassword {
        get { return result.NewPassword; }
        set { SetNewPassword(value); }
      }
      public Builder SetNewPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewPassword = true;
        result.newPassword_ = value;
        return this;
      }
      public Builder ClearNewPassword() {
        PrepareBuilder();
        result.hasNewPassword = false;
        result.newPassword_ = "";
        return this;
      }
    }
    static ChangePasswordInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ForwardReceiptInput : pb::GeneratedMessage<ForwardReceiptInput, ForwardReceiptInput.Builder> {
    private ForwardReceiptInput() { }
    private static readonly ForwardReceiptInput defaultInstance = new ForwardReceiptInput().MakeReadOnly();
    private static readonly string[] _forwardReceiptInputFieldNames = new string[] { "customerEmail", "customerMobile", "txnId" };
    private static readonly uint[] _forwardReceiptInputFieldTags = new uint[] { 26, 18, 10 };
    public static ForwardReceiptInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ForwardReceiptInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForwardReceiptInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ForwardReceiptInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ForwardReceiptInput, ForwardReceiptInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ForwardReceiptInput__FieldAccessorTable; }
    }
    
    public const int TxnIdFieldNumber = 1;
    private bool hasTxnId;
    private string txnId_ = "";
    public bool HasTxnId {
      get { return hasTxnId; }
    }
    public string TxnId {
      get { return txnId_; }
    }
    
    public const int CustomerMobileFieldNumber = 2;
    private bool hasCustomerMobile;
    private string customerMobile_ = "";
    public bool HasCustomerMobile {
      get { return hasCustomerMobile; }
    }
    public string CustomerMobile {
      get { return customerMobile_; }
    }
    
    public const int CustomerEmailFieldNumber = 3;
    private bool hasCustomerEmail;
    private string customerEmail_ = "";
    public bool HasCustomerEmail {
      get { return hasCustomerEmail; }
    }
    public string CustomerEmail {
      get { return customerEmail_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTxnId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _forwardReceiptInputFieldNames;
      if (hasTxnId) {
        output.WriteString(1, field_names[2], TxnId);
      }
      if (hasCustomerMobile) {
        output.WriteString(2, field_names[1], CustomerMobile);
      }
      if (hasCustomerEmail) {
        output.WriteString(3, field_names[0], CustomerEmail);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTxnId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, TxnId);
        }
        if (hasCustomerMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(2, CustomerMobile);
        }
        if (hasCustomerEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(3, CustomerEmail);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ForwardReceiptInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForwardReceiptInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForwardReceiptInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForwardReceiptInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForwardReceiptInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForwardReceiptInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ForwardReceiptInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ForwardReceiptInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ForwardReceiptInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForwardReceiptInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForwardReceiptInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ForwardReceiptInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ForwardReceiptInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForwardReceiptInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForwardReceiptInput result;
      
      private ForwardReceiptInput PrepareBuilder() {
        if (resultIsReadOnly) {
          ForwardReceiptInput original = result;
          result = new ForwardReceiptInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForwardReceiptInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.ForwardReceiptInput.Descriptor; }
      }
      
      public override ForwardReceiptInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.ForwardReceiptInput.DefaultInstance; }
      }
      
      public override ForwardReceiptInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ForwardReceiptInput) {
          return MergeFrom((ForwardReceiptInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForwardReceiptInput other) {
        if (other == global::com.eze.ezecli.ForwardReceiptInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTxnId) {
          TxnId = other.TxnId;
        }
        if (other.HasCustomerMobile) {
          CustomerMobile = other.CustomerMobile;
        }
        if (other.HasCustomerEmail) {
          CustomerEmail = other.CustomerEmail;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forwardReceiptInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forwardReceiptInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTxnId = input.ReadString(ref result.txnId_);
              break;
            }
            case 18: {
              result.hasCustomerMobile = input.ReadString(ref result.customerMobile_);
              break;
            }
            case 26: {
              result.hasCustomerEmail = input.ReadString(ref result.customerEmail_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTxnId {
        get { return result.hasTxnId; }
      }
      public string TxnId {
        get { return result.TxnId; }
        set { SetTxnId(value); }
      }
      public Builder SetTxnId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTxnId = true;
        result.txnId_ = value;
        return this;
      }
      public Builder ClearTxnId() {
        PrepareBuilder();
        result.hasTxnId = false;
        result.txnId_ = "";
        return this;
      }
      
      public bool HasCustomerMobile {
        get { return result.hasCustomerMobile; }
      }
      public string CustomerMobile {
        get { return result.CustomerMobile; }
        set { SetCustomerMobile(value); }
      }
      public Builder SetCustomerMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomerMobile = true;
        result.customerMobile_ = value;
        return this;
      }
      public Builder ClearCustomerMobile() {
        PrepareBuilder();
        result.hasCustomerMobile = false;
        result.customerMobile_ = "";
        return this;
      }
      
      public bool HasCustomerEmail {
        get { return result.hasCustomerEmail; }
      }
      public string CustomerEmail {
        get { return result.CustomerEmail; }
        set { SetCustomerEmail(value); }
      }
      public Builder SetCustomerEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomerEmail = true;
        result.customerEmail_ = value;
        return this;
      }
      public Builder ClearCustomerEmail() {
        PrepareBuilder();
        result.hasCustomerEmail = false;
        result.customerEmail_ = "";
        return this;
      }
    }
    static ForwardReceiptInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginInput : pb::GeneratedMessage<LoginInput, LoginInput.Builder> {
    private LoginInput() { }
    private static readonly LoginInput defaultInstance = new LoginInput().MakeReadOnly();
    private static readonly string[] _loginInputFieldNames = new string[] { "loginMode", "passkey", "username" };
    private static readonly uint[] _loginInputFieldTags = new uint[] { 8, 26, 18 };
    public static LoginInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_LoginInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginInput, LoginInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_LoginInput__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum LoginMode {
        PASSWORD = 0,
        APPKEY = 1,
      }
      
    }
    #endregion
    
    public const int LoginModeFieldNumber = 1;
    private bool hasLoginMode;
    private global::com.eze.ezecli.LoginInput.Types.LoginMode loginMode_ = global::com.eze.ezecli.LoginInput.Types.LoginMode.PASSWORD;
    public bool HasLoginMode {
      get { return hasLoginMode; }
    }
    public global::com.eze.ezecli.LoginInput.Types.LoginMode LoginMode {
      get { return loginMode_; }
    }
    
    public const int UsernameFieldNumber = 2;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int PasskeyFieldNumber = 3;
    private bool hasPasskey;
    private string passkey_ = "";
    public bool HasPasskey {
      get { return hasPasskey; }
    }
    public string Passkey {
      get { return passkey_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLoginMode) return false;
        if (!hasUsername) return false;
        if (!hasPasskey) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginInputFieldNames;
      if (hasLoginMode) {
        output.WriteEnum(1, field_names[0], (int) LoginMode, LoginMode);
      }
      if (hasUsername) {
        output.WriteString(2, field_names[2], Username);
      }
      if (hasPasskey) {
        output.WriteString(3, field_names[1], Passkey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLoginMode) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) LoginMode);
        }
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Username);
        }
        if (hasPasskey) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Passkey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginInput result;
      
      private LoginInput PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginInput original = result;
          result = new LoginInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.LoginInput.Descriptor; }
      }
      
      public override LoginInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.LoginInput.DefaultInstance; }
      }
      
      public override LoginInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginInput) {
          return MergeFrom((LoginInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginInput other) {
        if (other == global::com.eze.ezecli.LoginInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLoginMode) {
          LoginMode = other.LoginMode;
        }
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasPasskey) {
          Passkey = other.Passkey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.loginMode_, out unknown)) {
                result.hasLoginMode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 26: {
              result.hasPasskey = input.ReadString(ref result.passkey_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLoginMode {
       get { return result.hasLoginMode; }
      }
      public global::com.eze.ezecli.LoginInput.Types.LoginMode LoginMode {
        get { return result.LoginMode; }
        set { SetLoginMode(value); }
      }
      public Builder SetLoginMode(global::com.eze.ezecli.LoginInput.Types.LoginMode value) {
        PrepareBuilder();
        result.hasLoginMode = true;
        result.loginMode_ = value;
        return this;
      }
      public Builder ClearLoginMode() {
        PrepareBuilder();
        result.hasLoginMode = false;
        result.loginMode_ = global::com.eze.ezecli.LoginInput.Types.LoginMode.PASSWORD;
        return this;
      }
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasPasskey {
        get { return result.hasPasskey; }
      }
      public string Passkey {
        get { return result.Passkey; }
        set { SetPasskey(value); }
      }
      public Builder SetPasskey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPasskey = true;
        result.passkey_ = value;
        return this;
      }
      public Builder ClearPasskey() {
        PrepareBuilder();
        result.hasPasskey = false;
        result.passkey_ = "";
        return this;
      }
    }
    static LoginInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LoginOutput : pb::GeneratedMessage<LoginOutput, LoginOutput.Builder> {
    private LoginOutput() { }
    private static readonly LoginOutput defaultInstance = new LoginOutput().MakeReadOnly();
    private static readonly string[] _loginOutputFieldNames = new string[] { "sessionKey", "settings" };
    private static readonly uint[] _loginOutputFieldTags = new uint[] { 10, 18 };
    public static LoginOutput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginOutput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginOutput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_LoginOutput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginOutput, LoginOutput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_LoginOutput__FieldAccessorTable; }
    }
    
    public const int SessionKeyFieldNumber = 1;
    private bool hasSessionKey;
    private string sessionKey_ = "";
    public bool HasSessionKey {
      get { return hasSessionKey; }
    }
    public string SessionKey {
      get { return sessionKey_; }
    }
    
    public const int SettingsFieldNumber = 2;
    private bool hasSettings;
    private string settings_ = "";
    public bool HasSettings {
      get { return hasSettings; }
    }
    public string Settings {
      get { return settings_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginOutputFieldNames;
      if (hasSessionKey) {
        output.WriteString(1, field_names[0], SessionKey);
      }
      if (hasSettings) {
        output.WriteString(2, field_names[1], Settings);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSessionKey) {
          size += pb::CodedOutputStream.ComputeStringSize(1, SessionKey);
        }
        if (hasSettings) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Settings);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginOutput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginOutput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginOutput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginOutput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginOutput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginOutput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginOutput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginOutput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginOutput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginOutput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginOutput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginOutput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginOutput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginOutput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginOutput result;
      
      private LoginOutput PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginOutput original = result;
          result = new LoginOutput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginOutput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.LoginOutput.Descriptor; }
      }
      
      public override LoginOutput DefaultInstanceForType {
        get { return global::com.eze.ezecli.LoginOutput.DefaultInstance; }
      }
      
      public override LoginOutput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginOutput) {
          return MergeFrom((LoginOutput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginOutput other) {
        if (other == global::com.eze.ezecli.LoginOutput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSessionKey) {
          SessionKey = other.SessionKey;
        }
        if (other.HasSettings) {
          Settings = other.Settings;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginOutputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginOutputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSessionKey = input.ReadString(ref result.sessionKey_);
              break;
            }
            case 18: {
              result.hasSettings = input.ReadString(ref result.settings_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSessionKey {
        get { return result.hasSessionKey; }
      }
      public string SessionKey {
        get { return result.SessionKey; }
        set { SetSessionKey(value); }
      }
      public Builder SetSessionKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionKey = true;
        result.sessionKey_ = value;
        return this;
      }
      public Builder ClearSessionKey() {
        PrepareBuilder();
        result.hasSessionKey = false;
        result.sessionKey_ = "";
        return this;
      }
      
      public bool HasSettings {
        get { return result.hasSettings; }
      }
      public string Settings {
        get { return result.Settings; }
        set { SetSettings(value); }
      }
      public Builder SetSettings(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSettings = true;
        result.settings_ = value;
        return this;
      }
      public Builder ClearSettings() {
        PrepareBuilder();
        result.hasSettings = false;
        result.settings_ = "";
        return this;
      }
    }
    static LoginOutput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProgressInfo : pb::GeneratedMessage<ProgressInfo, ProgressInfo.Builder> {
    private ProgressInfo() { }
    private static readonly ProgressInfo defaultInstance = new ProgressInfo().MakeReadOnly();
    private static readonly string[] _progressInfoFieldNames = new string[] { "stepsCompleted", "totalSteps" };
    private static readonly uint[] _progressInfoFieldTags = new uint[] { 8, 16 };
    public static ProgressInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ProgressInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ProgressInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ProgressInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ProgressInfo, ProgressInfo.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ProgressInfo__FieldAccessorTable; }
    }
    
    public const int StepsCompletedFieldNumber = 1;
    private bool hasStepsCompleted;
    private int stepsCompleted_;
    public bool HasStepsCompleted {
      get { return hasStepsCompleted; }
    }
    public int StepsCompleted {
      get { return stepsCompleted_; }
    }
    
    public const int TotalStepsFieldNumber = 2;
    private bool hasTotalSteps;
    private int totalSteps_;
    public bool HasTotalSteps {
      get { return hasTotalSteps; }
    }
    public int TotalSteps {
      get { return totalSteps_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStepsCompleted) return false;
        if (!hasTotalSteps) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _progressInfoFieldNames;
      if (hasStepsCompleted) {
        output.WriteInt32(1, field_names[0], StepsCompleted);
      }
      if (hasTotalSteps) {
        output.WriteInt32(2, field_names[1], TotalSteps);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStepsCompleted) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, StepsCompleted);
        }
        if (hasTotalSteps) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, TotalSteps);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ProgressInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProgressInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProgressInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ProgressInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ProgressInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProgressInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ProgressInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ProgressInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ProgressInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ProgressInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ProgressInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ProgressInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ProgressInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ProgressInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ProgressInfo result;
      
      private ProgressInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          ProgressInfo original = result;
          result = new ProgressInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ProgressInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.ProgressInfo.Descriptor; }
      }
      
      public override ProgressInfo DefaultInstanceForType {
        get { return global::com.eze.ezecli.ProgressInfo.DefaultInstance; }
      }
      
      public override ProgressInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ProgressInfo) {
          return MergeFrom((ProgressInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ProgressInfo other) {
        if (other == global::com.eze.ezecli.ProgressInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStepsCompleted) {
          StepsCompleted = other.StepsCompleted;
        }
        if (other.HasTotalSteps) {
          TotalSteps = other.TotalSteps;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_progressInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _progressInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStepsCompleted = input.ReadInt32(ref result.stepsCompleted_);
              break;
            }
            case 16: {
              result.hasTotalSteps = input.ReadInt32(ref result.totalSteps_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStepsCompleted {
        get { return result.hasStepsCompleted; }
      }
      public int StepsCompleted {
        get { return result.StepsCompleted; }
        set { SetStepsCompleted(value); }
      }
      public Builder SetStepsCompleted(int value) {
        PrepareBuilder();
        result.hasStepsCompleted = true;
        result.stepsCompleted_ = value;
        return this;
      }
      public Builder ClearStepsCompleted() {
        PrepareBuilder();
        result.hasStepsCompleted = false;
        result.stepsCompleted_ = 0;
        return this;
      }
      
      public bool HasTotalSteps {
        get { return result.hasTotalSteps; }
      }
      public int TotalSteps {
        get { return result.TotalSteps; }
        set { SetTotalSteps(value); }
      }
      public Builder SetTotalSteps(int value) {
        PrepareBuilder();
        result.hasTotalSteps = true;
        result.totalSteps_ = value;
        return this;
      }
      public Builder ClearTotalSteps() {
        PrepareBuilder();
        result.hasTotalSteps = false;
        result.totalSteps_ = 0;
        return this;
      }
    }
    static ProgressInfo() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SignatureInput : pb::GeneratedMessage<SignatureInput, SignatureInput.Builder> {
    private SignatureInput() { }
    private static readonly SignatureInput defaultInstance = new SignatureInput().MakeReadOnly();
    private static readonly string[] _signatureInputFieldNames = new string[] { "height", "imageBytes", "imageType", "tipAmount", "txnId", "width" };
    private static readonly uint[] _signatureInputFieldTags = new uint[] { 32, 26, 16, 49, 10, 40 };
    public static SignatureInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SignatureInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SignatureInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_SignatureInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SignatureInput, SignatureInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_SignatureInput__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ImageType {
        PNG = 0,
        GIF = 1,
        JPEG = 2,
        BMP = 3,
      }
      
    }
    #endregion
    
    public const int TxnIdFieldNumber = 1;
    private bool hasTxnId;
    private string txnId_ = "";
    public bool HasTxnId {
      get { return hasTxnId; }
    }
    public string TxnId {
      get { return txnId_; }
    }
    
    public const int ImageTypeFieldNumber = 2;
    private bool hasImageType;
    private global::com.eze.ezecli.SignatureInput.Types.ImageType imageType_ = global::com.eze.ezecli.SignatureInput.Types.ImageType.PNG;
    public bool HasImageType {
      get { return hasImageType; }
    }
    public global::com.eze.ezecli.SignatureInput.Types.ImageType ImageType {
      get { return imageType_; }
    }
    
    public const int ImageBytesFieldNumber = 3;
    private bool hasImageBytes;
    private pb::ByteString imageBytes_ = pb::ByteString.Empty;
    public bool HasImageBytes {
      get { return hasImageBytes; }
    }
    public pb::ByteString ImageBytes {
      get { return imageBytes_; }
    }
    
    public const int HeightFieldNumber = 4;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public const int WidthFieldNumber = 5;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int TipAmountFieldNumber = 6;
    private bool hasTipAmount;
    private double tipAmount_;
    public bool HasTipAmount {
      get { return hasTipAmount; }
    }
    public double TipAmount {
      get { return tipAmount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTxnId) return false;
        if (!hasImageType) return false;
        if (!hasImageBytes) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _signatureInputFieldNames;
      if (hasTxnId) {
        output.WriteString(1, field_names[4], TxnId);
      }
      if (hasImageType) {
        output.WriteEnum(2, field_names[2], (int) ImageType, ImageType);
      }
      if (hasImageBytes) {
        output.WriteBytes(3, field_names[1], ImageBytes);
      }
      if (hasHeight) {
        output.WriteInt32(4, field_names[0], Height);
      }
      if (hasWidth) {
        output.WriteInt32(5, field_names[5], Width);
      }
      if (hasTipAmount) {
        output.WriteDouble(6, field_names[3], TipAmount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTxnId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, TxnId);
        }
        if (hasImageType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ImageType);
        }
        if (hasImageBytes) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, ImageBytes);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Height);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Width);
        }
        if (hasTipAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, TipAmount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SignatureInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignatureInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignatureInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SignatureInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SignatureInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignatureInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SignatureInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SignatureInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SignatureInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SignatureInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SignatureInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SignatureInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SignatureInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SignatureInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SignatureInput result;
      
      private SignatureInput PrepareBuilder() {
        if (resultIsReadOnly) {
          SignatureInput original = result;
          result = new SignatureInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SignatureInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.SignatureInput.Descriptor; }
      }
      
      public override SignatureInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.SignatureInput.DefaultInstance; }
      }
      
      public override SignatureInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SignatureInput) {
          return MergeFrom((SignatureInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SignatureInput other) {
        if (other == global::com.eze.ezecli.SignatureInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTxnId) {
          TxnId = other.TxnId;
        }
        if (other.HasImageType) {
          ImageType = other.ImageType;
        }
        if (other.HasImageBytes) {
          ImageBytes = other.ImageBytes;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasTipAmount) {
          TipAmount = other.TipAmount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_signatureInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _signatureInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTxnId = input.ReadString(ref result.txnId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.imageType_, out unknown)) {
                result.hasImageType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              result.hasImageBytes = input.ReadBytes(ref result.imageBytes_);
              break;
            }
            case 32: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
            case 40: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 49: {
              result.hasTipAmount = input.ReadDouble(ref result.tipAmount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTxnId {
        get { return result.hasTxnId; }
      }
      public string TxnId {
        get { return result.TxnId; }
        set { SetTxnId(value); }
      }
      public Builder SetTxnId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTxnId = true;
        result.txnId_ = value;
        return this;
      }
      public Builder ClearTxnId() {
        PrepareBuilder();
        result.hasTxnId = false;
        result.txnId_ = "";
        return this;
      }
      
      public bool HasImageType {
       get { return result.hasImageType; }
      }
      public global::com.eze.ezecli.SignatureInput.Types.ImageType ImageType {
        get { return result.ImageType; }
        set { SetImageType(value); }
      }
      public Builder SetImageType(global::com.eze.ezecli.SignatureInput.Types.ImageType value) {
        PrepareBuilder();
        result.hasImageType = true;
        result.imageType_ = value;
        return this;
      }
      public Builder ClearImageType() {
        PrepareBuilder();
        result.hasImageType = false;
        result.imageType_ = global::com.eze.ezecli.SignatureInput.Types.ImageType.PNG;
        return this;
      }
      
      public bool HasImageBytes {
        get { return result.hasImageBytes; }
      }
      public pb::ByteString ImageBytes {
        get { return result.ImageBytes; }
        set { SetImageBytes(value); }
      }
      public Builder SetImageBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImageBytes = true;
        result.imageBytes_ = value;
        return this;
      }
      public Builder ClearImageBytes() {
        PrepareBuilder();
        result.hasImageBytes = false;
        result.imageBytes_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasTipAmount {
        get { return result.hasTipAmount; }
      }
      public double TipAmount {
        get { return result.TipAmount; }
        set { SetTipAmount(value); }
      }
      public Builder SetTipAmount(double value) {
        PrepareBuilder();
        result.hasTipAmount = true;
        result.tipAmount_ = value;
        return this;
      }
      public Builder ClearTipAmount() {
        PrepareBuilder();
        result.hasTipAmount = false;
        result.tipAmount_ = 0D;
        return this;
      }
    }
    static SignatureInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class StatusInfo : pb::GeneratedMessage<StatusInfo, StatusInfo.Builder> {
    private StatusInfo() { }
    private static readonly StatusInfo defaultInstance = new StatusInfo().MakeReadOnly();
    private static readonly string[] _statusInfoFieldNames = new string[] { "code", "message" };
    private static readonly uint[] _statusInfoFieldTags = new uint[] { 10, 18 };
    public static StatusInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override StatusInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StatusInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_StatusInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<StatusInfo, StatusInfo.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_StatusInfo__FieldAccessorTable; }
    }
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private string code_ = "";
    public bool HasCode {
      get { return hasCode; }
    }
    public string Code {
      get { return code_; }
    }
    
    public const int MessageFieldNumber = 2;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasMessage) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _statusInfoFieldNames;
      if (hasCode) {
        output.WriteString(1, field_names[0], Code);
      }
      if (hasMessage) {
        output.WriteString(2, field_names[1], Message);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCode) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Code);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Message);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static StatusInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatusInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatusInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static StatusInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static StatusInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatusInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static StatusInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static StatusInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static StatusInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static StatusInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StatusInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(StatusInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<StatusInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StatusInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StatusInfo result;
      
      private StatusInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          StatusInfo original = result;
          result = new StatusInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StatusInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.StatusInfo.Descriptor; }
      }
      
      public override StatusInfo DefaultInstanceForType {
        get { return global::com.eze.ezecli.StatusInfo.DefaultInstance; }
      }
      
      public override StatusInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is StatusInfo) {
          return MergeFrom((StatusInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StatusInfo other) {
        if (other == global::com.eze.ezecli.StatusInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_statusInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _statusInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasCode = input.ReadString(ref result.code_);
              break;
            }
            case 18: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
        get { return result.hasCode; }
      }
      public string Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = "";
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
    }
    static StatusInfo() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TxnDetailsInput : pb::GeneratedMessage<TxnDetailsInput, TxnDetailsInput.Builder> {
    private TxnDetailsInput() { }
    private static readonly TxnDetailsInput defaultInstance = new TxnDetailsInput().MakeReadOnly();
    private static readonly string[] _txnDetailsInputFieldNames = new string[] { "txnId" };
    private static readonly uint[] _txnDetailsInputFieldTags = new uint[] { 10 };
    public static TxnDetailsInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TxnDetailsInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TxnDetailsInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnDetailsInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TxnDetailsInput, TxnDetailsInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnDetailsInput__FieldAccessorTable; }
    }
    
    public const int TxnIdFieldNumber = 1;
    private bool hasTxnId;
    private string txnId_ = "";
    public bool HasTxnId {
      get { return hasTxnId; }
    }
    public string TxnId {
      get { return txnId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTxnId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _txnDetailsInputFieldNames;
      if (hasTxnId) {
        output.WriteString(1, field_names[0], TxnId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTxnId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, TxnId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TxnDetailsInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnDetailsInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnDetailsInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnDetailsInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnDetailsInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnDetailsInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TxnDetailsInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TxnDetailsInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TxnDetailsInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnDetailsInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TxnDetailsInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TxnDetailsInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TxnDetailsInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TxnDetailsInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TxnDetailsInput result;
      
      private TxnDetailsInput PrepareBuilder() {
        if (resultIsReadOnly) {
          TxnDetailsInput original = result;
          result = new TxnDetailsInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TxnDetailsInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.TxnDetailsInput.Descriptor; }
      }
      
      public override TxnDetailsInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.TxnDetailsInput.DefaultInstance; }
      }
      
      public override TxnDetailsInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TxnDetailsInput) {
          return MergeFrom((TxnDetailsInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TxnDetailsInput other) {
        if (other == global::com.eze.ezecli.TxnDetailsInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTxnId) {
          TxnId = other.TxnId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_txnDetailsInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _txnDetailsInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTxnId = input.ReadString(ref result.txnId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTxnId {
        get { return result.hasTxnId; }
      }
      public string TxnId {
        get { return result.TxnId; }
        set { SetTxnId(value); }
      }
      public Builder SetTxnId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTxnId = true;
        result.txnId_ = value;
        return this;
      }
      public Builder ClearTxnId() {
        PrepareBuilder();
        result.hasTxnId = false;
        result.txnId_ = "";
        return this;
      }
    }
    static TxnDetailsInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TxnHistoryInput : pb::GeneratedMessage<TxnHistoryInput, TxnHistoryInput.Builder> {
    private TxnHistoryInput() { }
    private static readonly TxnHistoryInput defaultInstance = new TxnHistoryInput().MakeReadOnly();
    private static readonly string[] _txnHistoryInputFieldNames = new string[] { "endDate", "strtDate" };
    private static readonly uint[] _txnHistoryInputFieldTags = new uint[] { 18, 10 };
    public static TxnHistoryInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TxnHistoryInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TxnHistoryInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnHistoryInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TxnHistoryInput, TxnHistoryInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnHistoryInput__FieldAccessorTable; }
    }
    
    public const int StrtDateFieldNumber = 1;
    private bool hasStrtDate;
    private string strtDate_ = "";
    public bool HasStrtDate {
      get { return hasStrtDate; }
    }
    public string StrtDate {
      get { return strtDate_; }
    }
    
    public const int EndDateFieldNumber = 2;
    private bool hasEndDate;
    private string endDate_ = "";
    public bool HasEndDate {
      get { return hasEndDate; }
    }
    public string EndDate {
      get { return endDate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStrtDate) return false;
        if (!hasEndDate) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _txnHistoryInputFieldNames;
      if (hasStrtDate) {
        output.WriteString(1, field_names[1], StrtDate);
      }
      if (hasEndDate) {
        output.WriteString(2, field_names[0], EndDate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStrtDate) {
          size += pb::CodedOutputStream.ComputeStringSize(1, StrtDate);
        }
        if (hasEndDate) {
          size += pb::CodedOutputStream.ComputeStringSize(2, EndDate);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TxnHistoryInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnHistoryInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnHistoryInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnHistoryInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnHistoryInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnHistoryInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TxnHistoryInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TxnHistoryInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TxnHistoryInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnHistoryInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TxnHistoryInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TxnHistoryInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TxnHistoryInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TxnHistoryInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TxnHistoryInput result;
      
      private TxnHistoryInput PrepareBuilder() {
        if (resultIsReadOnly) {
          TxnHistoryInput original = result;
          result = new TxnHistoryInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TxnHistoryInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.TxnHistoryInput.Descriptor; }
      }
      
      public override TxnHistoryInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.TxnHistoryInput.DefaultInstance; }
      }
      
      public override TxnHistoryInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TxnHistoryInput) {
          return MergeFrom((TxnHistoryInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TxnHistoryInput other) {
        if (other == global::com.eze.ezecli.TxnHistoryInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStrtDate) {
          StrtDate = other.StrtDate;
        }
        if (other.HasEndDate) {
          EndDate = other.EndDate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_txnHistoryInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _txnHistoryInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasStrtDate = input.ReadString(ref result.strtDate_);
              break;
            }
            case 18: {
              result.hasEndDate = input.ReadString(ref result.endDate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStrtDate {
        get { return result.hasStrtDate; }
      }
      public string StrtDate {
        get { return result.StrtDate; }
        set { SetStrtDate(value); }
      }
      public Builder SetStrtDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStrtDate = true;
        result.strtDate_ = value;
        return this;
      }
      public Builder ClearStrtDate() {
        PrepareBuilder();
        result.hasStrtDate = false;
        result.strtDate_ = "";
        return this;
      }
      
      public bool HasEndDate {
        get { return result.hasEndDate; }
      }
      public string EndDate {
        get { return result.EndDate; }
        set { SetEndDate(value); }
      }
      public Builder SetEndDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEndDate = true;
        result.endDate_ = value;
        return this;
      }
      public Builder ClearEndDate() {
        PrepareBuilder();
        result.hasEndDate = false;
        result.endDate_ = "";
        return this;
      }
    }
    static TxnHistoryInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TxnHistory : pb::GeneratedMessage<TxnHistory, TxnHistory.Builder> {
    private TxnHistory() { }
    private static readonly TxnHistory defaultInstance = new TxnHistory().MakeReadOnly();
    private static readonly string[] _txnHistoryFieldNames = new string[] { "netAmount", "summaryItemCount", "summaryItems", "totalCount", "txns" };
    private static readonly uint[] _txnHistoryFieldTags = new uint[] { 17, 24, 34, 8, 42 };
    public static TxnHistory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TxnHistory DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TxnHistory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnHistory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TxnHistory, TxnHistory.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnHistory__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SummaryItem : pb::GeneratedMessage<SummaryItem, SummaryItem.Builder> {
        private SummaryItem() { }
        private static readonly SummaryItem defaultInstance = new SummaryItem().MakeReadOnly();
        private static readonly string[] _summaryItemFieldNames = new string[] { "amount", "count", "title" };
        private static readonly uint[] _summaryItemFieldTags = new uint[] { 25, 16, 10 };
        public static SummaryItem DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override SummaryItem DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override SummaryItem ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnHistory_SummaryItem__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<SummaryItem, SummaryItem.Builder> InternalFieldAccessors {
          get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnHistory_SummaryItem__FieldAccessorTable; }
        }
        
        public const int TitleFieldNumber = 1;
        private bool hasTitle;
        private string title_ = "";
        public bool HasTitle {
          get { return hasTitle; }
        }
        public string Title {
          get { return title_; }
        }
        
        public const int CountFieldNumber = 2;
        private bool hasCount;
        private int count_;
        public bool HasCount {
          get { return hasCount; }
        }
        public int Count {
          get { return count_; }
        }
        
        public const int AmountFieldNumber = 3;
        private bool hasAmount;
        private double amount_;
        public bool HasAmount {
          get { return hasAmount; }
        }
        public double Amount {
          get { return amount_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasTitle) return false;
            if (!hasCount) return false;
            if (!hasAmount) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _summaryItemFieldNames;
          if (hasTitle) {
            output.WriteString(1, field_names[2], Title);
          }
          if (hasCount) {
            output.WriteInt32(2, field_names[1], Count);
          }
          if (hasAmount) {
            output.WriteDouble(3, field_names[0], Amount);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasTitle) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Title);
            }
            if (hasCount) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
            }
            if (hasAmount) {
              size += pb::CodedOutputStream.ComputeDoubleSize(3, Amount);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static SummaryItem ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SummaryItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SummaryItem ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SummaryItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SummaryItem ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SummaryItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SummaryItem ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SummaryItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SummaryItem ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SummaryItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SummaryItem MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SummaryItem prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SummaryItem, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SummaryItem cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private SummaryItem result;
          
          private SummaryItem PrepareBuilder() {
            if (resultIsReadOnly) {
              SummaryItem original = result;
              result = new SummaryItem();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override SummaryItem MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::com.eze.ezecli.TxnHistory.Types.SummaryItem.Descriptor; }
          }
          
          public override SummaryItem DefaultInstanceForType {
            get { return global::com.eze.ezecli.TxnHistory.Types.SummaryItem.DefaultInstance; }
          }
          
          public override SummaryItem BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is SummaryItem) {
              return MergeFrom((SummaryItem) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(SummaryItem other) {
            if (other == global::com.eze.ezecli.TxnHistory.Types.SummaryItem.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasTitle) {
              Title = other.Title;
            }
            if (other.HasCount) {
              Count = other.Count;
            }
            if (other.HasAmount) {
              Amount = other.Amount;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_summaryItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _summaryItemFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasTitle = input.ReadString(ref result.title_);
                  break;
                }
                case 16: {
                  result.hasCount = input.ReadInt32(ref result.count_);
                  break;
                }
                case 25: {
                  result.hasAmount = input.ReadDouble(ref result.amount_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasTitle {
            get { return result.hasTitle; }
          }
          public string Title {
            get { return result.Title; }
            set { SetTitle(value); }
          }
          public Builder SetTitle(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTitle = true;
            result.title_ = value;
            return this;
          }
          public Builder ClearTitle() {
            PrepareBuilder();
            result.hasTitle = false;
            result.title_ = "";
            return this;
          }
          
          public bool HasCount {
            get { return result.hasCount; }
          }
          public int Count {
            get { return result.Count; }
            set { SetCount(value); }
          }
          public Builder SetCount(int value) {
            PrepareBuilder();
            result.hasCount = true;
            result.count_ = value;
            return this;
          }
          public Builder ClearCount() {
            PrepareBuilder();
            result.hasCount = false;
            result.count_ = 0;
            return this;
          }
          
          public bool HasAmount {
            get { return result.hasAmount; }
          }
          public double Amount {
            get { return result.Amount; }
            set { SetAmount(value); }
          }
          public Builder SetAmount(double value) {
            PrepareBuilder();
            result.hasAmount = true;
            result.amount_ = value;
            return this;
          }
          public Builder ClearAmount() {
            PrepareBuilder();
            result.hasAmount = false;
            result.amount_ = 0D;
            return this;
          }
        }
        static SummaryItem() {
          object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TotalCountFieldNumber = 1;
    private bool hasTotalCount;
    private int totalCount_;
    public bool HasTotalCount {
      get { return hasTotalCount; }
    }
    public int TotalCount {
      get { return totalCount_; }
    }
    
    public const int NetAmountFieldNumber = 2;
    private bool hasNetAmount;
    private double netAmount_;
    public bool HasNetAmount {
      get { return hasNetAmount; }
    }
    public double NetAmount {
      get { return netAmount_; }
    }
    
    public const int SummaryItemCountFieldNumber = 3;
    private bool hasSummaryItemCount;
    private int summaryItemCount_;
    public bool HasSummaryItemCount {
      get { return hasSummaryItemCount; }
    }
    public int SummaryItemCount {
      get { return summaryItemCount_; }
    }
    
    public const int SummaryItemsFieldNumber = 4;
    private pbc::PopsicleList<global::com.eze.ezecli.TxnHistory.Types.SummaryItem> summaryItems_ = new pbc::PopsicleList<global::com.eze.ezecli.TxnHistory.Types.SummaryItem>();
    public scg::IList<global::com.eze.ezecli.TxnHistory.Types.SummaryItem> SummaryItemsList {
      get { return summaryItems_; }
    }
    public int SummaryItemsCount {
      get { return summaryItems_.Count; }
    }
    public global::com.eze.ezecli.TxnHistory.Types.SummaryItem GetSummaryItems(int index) {
      return summaryItems_[index];
    }
    
    public const int TxnsFieldNumber = 5;
    private pbc::PopsicleList<global::com.eze.ezecli.Txn> txns_ = new pbc::PopsicleList<global::com.eze.ezecli.Txn>();
    public scg::IList<global::com.eze.ezecli.Txn> TxnsList {
      get { return txns_; }
    }
    public int TxnsCount {
      get { return txns_.Count; }
    }
    public global::com.eze.ezecli.Txn GetTxns(int index) {
      return txns_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTotalCount) return false;
        if (!hasNetAmount) return false;
        if (!hasSummaryItemCount) return false;
        foreach (global::com.eze.ezecli.TxnHistory.Types.SummaryItem element in SummaryItemsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::com.eze.ezecli.Txn element in TxnsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _txnHistoryFieldNames;
      if (hasTotalCount) {
        output.WriteInt32(1, field_names[3], TotalCount);
      }
      if (hasNetAmount) {
        output.WriteDouble(2, field_names[0], NetAmount);
      }
      if (hasSummaryItemCount) {
        output.WriteInt32(3, field_names[1], SummaryItemCount);
      }
      if (summaryItems_.Count > 0) {
        output.WriteMessageArray(4, field_names[2], summaryItems_);
      }
      if (txns_.Count > 0) {
        output.WriteMessageArray(5, field_names[4], txns_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTotalCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TotalCount);
        }
        if (hasNetAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, NetAmount);
        }
        if (hasSummaryItemCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SummaryItemCount);
        }
        foreach (global::com.eze.ezecli.TxnHistory.Types.SummaryItem element in SummaryItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        foreach (global::com.eze.ezecli.Txn element in TxnsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TxnHistory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnHistory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnHistory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnHistory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnHistory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnHistory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TxnHistory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TxnHistory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TxnHistory ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnHistory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TxnHistory MakeReadOnly() {
      summaryItems_.MakeReadOnly();
      txns_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TxnHistory prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TxnHistory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TxnHistory cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TxnHistory result;
      
      private TxnHistory PrepareBuilder() {
        if (resultIsReadOnly) {
          TxnHistory original = result;
          result = new TxnHistory();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TxnHistory MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.TxnHistory.Descriptor; }
      }
      
      public override TxnHistory DefaultInstanceForType {
        get { return global::com.eze.ezecli.TxnHistory.DefaultInstance; }
      }
      
      public override TxnHistory BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TxnHistory) {
          return MergeFrom((TxnHistory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TxnHistory other) {
        if (other == global::com.eze.ezecli.TxnHistory.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTotalCount) {
          TotalCount = other.TotalCount;
        }
        if (other.HasNetAmount) {
          NetAmount = other.NetAmount;
        }
        if (other.HasSummaryItemCount) {
          SummaryItemCount = other.SummaryItemCount;
        }
        if (other.summaryItems_.Count != 0) {
          result.summaryItems_.Add(other.summaryItems_);
        }
        if (other.txns_.Count != 0) {
          result.txns_.Add(other.txns_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_txnHistoryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _txnHistoryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTotalCount = input.ReadInt32(ref result.totalCount_);
              break;
            }
            case 17: {
              result.hasNetAmount = input.ReadDouble(ref result.netAmount_);
              break;
            }
            case 24: {
              result.hasSummaryItemCount = input.ReadInt32(ref result.summaryItemCount_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.summaryItems_, global::com.eze.ezecli.TxnHistory.Types.SummaryItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.txns_, global::com.eze.ezecli.Txn.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTotalCount {
        get { return result.hasTotalCount; }
      }
      public int TotalCount {
        get { return result.TotalCount; }
        set { SetTotalCount(value); }
      }
      public Builder SetTotalCount(int value) {
        PrepareBuilder();
        result.hasTotalCount = true;
        result.totalCount_ = value;
        return this;
      }
      public Builder ClearTotalCount() {
        PrepareBuilder();
        result.hasTotalCount = false;
        result.totalCount_ = 0;
        return this;
      }
      
      public bool HasNetAmount {
        get { return result.hasNetAmount; }
      }
      public double NetAmount {
        get { return result.NetAmount; }
        set { SetNetAmount(value); }
      }
      public Builder SetNetAmount(double value) {
        PrepareBuilder();
        result.hasNetAmount = true;
        result.netAmount_ = value;
        return this;
      }
      public Builder ClearNetAmount() {
        PrepareBuilder();
        result.hasNetAmount = false;
        result.netAmount_ = 0D;
        return this;
      }
      
      public bool HasSummaryItemCount {
        get { return result.hasSummaryItemCount; }
      }
      public int SummaryItemCount {
        get { return result.SummaryItemCount; }
        set { SetSummaryItemCount(value); }
      }
      public Builder SetSummaryItemCount(int value) {
        PrepareBuilder();
        result.hasSummaryItemCount = true;
        result.summaryItemCount_ = value;
        return this;
      }
      public Builder ClearSummaryItemCount() {
        PrepareBuilder();
        result.hasSummaryItemCount = false;
        result.summaryItemCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::com.eze.ezecli.TxnHistory.Types.SummaryItem> SummaryItemsList {
        get { return PrepareBuilder().summaryItems_; }
      }
      public int SummaryItemsCount {
        get { return result.SummaryItemsCount; }
      }
      public global::com.eze.ezecli.TxnHistory.Types.SummaryItem GetSummaryItems(int index) {
        return result.GetSummaryItems(index);
      }
      public Builder SetSummaryItems(int index, global::com.eze.ezecli.TxnHistory.Types.SummaryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.summaryItems_[index] = value;
        return this;
      }
      public Builder SetSummaryItems(int index, global::com.eze.ezecli.TxnHistory.Types.SummaryItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.summaryItems_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddSummaryItems(global::com.eze.ezecli.TxnHistory.Types.SummaryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.summaryItems_.Add(value);
        return this;
      }
      public Builder AddSummaryItems(global::com.eze.ezecli.TxnHistory.Types.SummaryItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.summaryItems_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeSummaryItems(scg::IEnumerable<global::com.eze.ezecli.TxnHistory.Types.SummaryItem> values) {
        PrepareBuilder();
        result.summaryItems_.Add(values);
        return this;
      }
      public Builder ClearSummaryItems() {
        PrepareBuilder();
        result.summaryItems_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::com.eze.ezecli.Txn> TxnsList {
        get { return PrepareBuilder().txns_; }
      }
      public int TxnsCount {
        get { return result.TxnsCount; }
      }
      public global::com.eze.ezecli.Txn GetTxns(int index) {
        return result.GetTxns(index);
      }
      public Builder SetTxns(int index, global::com.eze.ezecli.Txn value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.txns_[index] = value;
        return this;
      }
      public Builder SetTxns(int index, global::com.eze.ezecli.Txn.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.txns_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddTxns(global::com.eze.ezecli.Txn value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.txns_.Add(value);
        return this;
      }
      public Builder AddTxns(global::com.eze.ezecli.Txn.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.txns_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeTxns(scg::IEnumerable<global::com.eze.ezecli.Txn> values) {
        PrepareBuilder();
        result.txns_.Add(values);
        return this;
      }
      public Builder ClearTxns() {
        PrepareBuilder();
        result.txns_.Clear();
        return this;
      }
    }
    static TxnHistory() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TxnInput : pb::GeneratedMessage<TxnInput, TxnInput.Builder> {
    private TxnInput() { }
    private static readonly TxnInput defaultInstance = new TxnInput().MakeReadOnly();
    private static readonly string[] _txnInputFieldNames = new string[] { "additionalData", "amount", "amountOther", "bankCode", "chequeDate", "chequeNumber", "customerEmail", "customerMobile", "externalReference2", "externalReference3", "nonce", "orderId", "receipt_type", "txnType" };
    private static readonly uint[] _txnInputFieldTags = new uint[] { 106, 17, 73, 90, 98, 82, 50, 42, 58, 66, 34, 26, 114, 8 };
    public static TxnInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TxnInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TxnInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TxnInput, TxnInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnInput__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum TxnType {
        CARD_AUTH = 0,
        CARD_PRE_AUTH = 1,
        CARD_PRE_AUTH_CONF = 2,
        CASH = 3,
        CHEQUE = 4,
      }
      
    }
    #endregion
    
    public const int TxnTypeFieldNumber = 1;
    private bool hasTxnType;
    private global::com.eze.ezecli.TxnInput.Types.TxnType txnType_ = global::com.eze.ezecli.TxnInput.Types.TxnType.CARD_AUTH;
    public bool HasTxnType {
      get { return hasTxnType; }
    }
    public global::com.eze.ezecli.TxnInput.Types.TxnType TxnType {
      get { return txnType_; }
    }
    
    public const int AmountFieldNumber = 2;
    private bool hasAmount;
    private double amount_;
    public bool HasAmount {
      get { return hasAmount; }
    }
    public double Amount {
      get { return amount_; }
    }
    
    public const int OrderIdFieldNumber = 3;
    private bool hasOrderId;
    private string orderId_ = "";
    public bool HasOrderId {
      get { return hasOrderId; }
    }
    public string OrderId {
      get { return orderId_; }
    }
    
    public const int NonceFieldNumber = 4;
    private bool hasNonce;
    private string nonce_ = "";
    public bool HasNonce {
      get { return hasNonce; }
    }
    public string Nonce {
      get { return nonce_; }
    }
    
    public const int CustomerMobileFieldNumber = 5;
    private bool hasCustomerMobile;
    private string customerMobile_ = "";
    public bool HasCustomerMobile {
      get { return hasCustomerMobile; }
    }
    public string CustomerMobile {
      get { return customerMobile_; }
    }
    
    public const int CustomerEmailFieldNumber = 6;
    private bool hasCustomerEmail;
    private string customerEmail_ = "";
    public bool HasCustomerEmail {
      get { return hasCustomerEmail; }
    }
    public string CustomerEmail {
      get { return customerEmail_; }
    }
    
    public const int ExternalReference2FieldNumber = 7;
    private bool hasExternalReference2;
    private string externalReference2_ = "";
    public bool HasExternalReference2 {
      get { return hasExternalReference2; }
    }
    public string ExternalReference2 {
      get { return externalReference2_; }
    }
    
    public const int ExternalReference3FieldNumber = 8;
    private bool hasExternalReference3;
    private string externalReference3_ = "";
    public bool HasExternalReference3 {
      get { return hasExternalReference3; }
    }
    public string ExternalReference3 {
      get { return externalReference3_; }
    }
    
    public const int AmountOtherFieldNumber = 9;
    private bool hasAmountOther;
    private double amountOther_;
    public bool HasAmountOther {
      get { return hasAmountOther; }
    }
    public double AmountOther {
      get { return amountOther_; }
    }
    
    public const int ChequeNumberFieldNumber = 10;
    private bool hasChequeNumber;
    private string chequeNumber_ = "";
    public bool HasChequeNumber {
      get { return hasChequeNumber; }
    }
    public string ChequeNumber {
      get { return chequeNumber_; }
    }
    
    public const int BankCodeFieldNumber = 11;
    private bool hasBankCode;
    private string bankCode_ = "";
    public bool HasBankCode {
      get { return hasBankCode; }
    }
    public string BankCode {
      get { return bankCode_; }
    }
    
    public const int ChequeDateFieldNumber = 12;
    private bool hasChequeDate;
    private string chequeDate_ = "";
    public bool HasChequeDate {
      get { return hasChequeDate; }
    }
    public string ChequeDate {
      get { return chequeDate_; }
    }
    
    public const int AdditionalDataFieldNumber = 13;
    private bool hasAdditionalData;
    private string additionalData_ = "";
    public bool HasAdditionalData {
      get { return hasAdditionalData; }
    }
    public string AdditionalData {
      get { return additionalData_; }
    }
    
    public const int ReceiptTypeFieldNumber = 14;
    private bool hasReceiptType;
    private string receiptType_ = "";
    public bool HasReceiptType {
      get { return hasReceiptType; }
    }
    public string ReceiptType {
      get { return receiptType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTxnType) return false;
        if (!hasAmount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _txnInputFieldNames;
      if (hasTxnType) {
        output.WriteEnum(1, field_names[13], (int) TxnType, TxnType);
      }
      if (hasAmount) {
        output.WriteDouble(2, field_names[1], Amount);
      }
      if (hasOrderId) {
        output.WriteString(3, field_names[11], OrderId);
      }
      if (hasNonce) {
        output.WriteString(4, field_names[10], Nonce);
      }
      if (hasCustomerMobile) {
        output.WriteString(5, field_names[7], CustomerMobile);
      }
      if (hasCustomerEmail) {
        output.WriteString(6, field_names[6], CustomerEmail);
      }
      if (hasExternalReference2) {
        output.WriteString(7, field_names[8], ExternalReference2);
      }
      if (hasExternalReference3) {
        output.WriteString(8, field_names[9], ExternalReference3);
      }
      if (hasAmountOther) {
        output.WriteDouble(9, field_names[2], AmountOther);
      }
      if (hasChequeNumber) {
        output.WriteString(10, field_names[5], ChequeNumber);
      }
      if (hasBankCode) {
        output.WriteString(11, field_names[3], BankCode);
      }
      if (hasChequeDate) {
        output.WriteString(12, field_names[4], ChequeDate);
      }
      if (hasAdditionalData) {
        output.WriteString(13, field_names[0], AdditionalData);
      }
      if (hasReceiptType) {
        output.WriteString(14, field_names[12], ReceiptType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTxnType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) TxnType);
        }
        if (hasAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Amount);
        }
        if (hasOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, OrderId);
        }
        if (hasNonce) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Nonce);
        }
        if (hasCustomerMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(5, CustomerMobile);
        }
        if (hasCustomerEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(6, CustomerEmail);
        }
        if (hasExternalReference2) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ExternalReference2);
        }
        if (hasExternalReference3) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ExternalReference3);
        }
        if (hasAmountOther) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, AmountOther);
        }
        if (hasChequeNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(10, ChequeNumber);
        }
        if (hasBankCode) {
          size += pb::CodedOutputStream.ComputeStringSize(11, BankCode);
        }
        if (hasChequeDate) {
          size += pb::CodedOutputStream.ComputeStringSize(12, ChequeDate);
        }
        if (hasAdditionalData) {
          size += pb::CodedOutputStream.ComputeStringSize(13, AdditionalData);
        }
        if (hasReceiptType) {
          size += pb::CodedOutputStream.ComputeStringSize(14, ReceiptType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TxnInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TxnInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TxnInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TxnInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TxnInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TxnInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TxnInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TxnInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TxnInput result;
      
      private TxnInput PrepareBuilder() {
        if (resultIsReadOnly) {
          TxnInput original = result;
          result = new TxnInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TxnInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.TxnInput.Descriptor; }
      }
      
      public override TxnInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.TxnInput.DefaultInstance; }
      }
      
      public override TxnInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TxnInput) {
          return MergeFrom((TxnInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TxnInput other) {
        if (other == global::com.eze.ezecli.TxnInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTxnType) {
          TxnType = other.TxnType;
        }
        if (other.HasAmount) {
          Amount = other.Amount;
        }
        if (other.HasOrderId) {
          OrderId = other.OrderId;
        }
        if (other.HasNonce) {
          Nonce = other.Nonce;
        }
        if (other.HasCustomerMobile) {
          CustomerMobile = other.CustomerMobile;
        }
        if (other.HasCustomerEmail) {
          CustomerEmail = other.CustomerEmail;
        }
        if (other.HasExternalReference2) {
          ExternalReference2 = other.ExternalReference2;
        }
        if (other.HasExternalReference3) {
          ExternalReference3 = other.ExternalReference3;
        }
        if (other.HasAmountOther) {
          AmountOther = other.AmountOther;
        }
        if (other.HasChequeNumber) {
          ChequeNumber = other.ChequeNumber;
        }
        if (other.HasBankCode) {
          BankCode = other.BankCode;
        }
        if (other.HasChequeDate) {
          ChequeDate = other.ChequeDate;
        }
        if (other.HasAdditionalData) {
          AdditionalData = other.AdditionalData;
        }
        if (other.HasReceiptType) {
          ReceiptType = other.ReceiptType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_txnInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _txnInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.txnType_, out unknown)) {
                result.hasTxnType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 17: {
              result.hasAmount = input.ReadDouble(ref result.amount_);
              break;
            }
            case 26: {
              result.hasOrderId = input.ReadString(ref result.orderId_);
              break;
            }
            case 34: {
              result.hasNonce = input.ReadString(ref result.nonce_);
              break;
            }
            case 42: {
              result.hasCustomerMobile = input.ReadString(ref result.customerMobile_);
              break;
            }
            case 50: {
              result.hasCustomerEmail = input.ReadString(ref result.customerEmail_);
              break;
            }
            case 58: {
              result.hasExternalReference2 = input.ReadString(ref result.externalReference2_);
              break;
            }
            case 66: {
              result.hasExternalReference3 = input.ReadString(ref result.externalReference3_);
              break;
            }
            case 73: {
              result.hasAmountOther = input.ReadDouble(ref result.amountOther_);
              break;
            }
            case 82: {
              result.hasChequeNumber = input.ReadString(ref result.chequeNumber_);
              break;
            }
            case 90: {
              result.hasBankCode = input.ReadString(ref result.bankCode_);
              break;
            }
            case 98: {
              result.hasChequeDate = input.ReadString(ref result.chequeDate_);
              break;
            }
            case 106: {
              result.hasAdditionalData = input.ReadString(ref result.additionalData_);
              break;
            }
            case 114: {
              result.hasReceiptType = input.ReadString(ref result.receiptType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTxnType {
       get { return result.hasTxnType; }
      }
      public global::com.eze.ezecli.TxnInput.Types.TxnType TxnType {
        get { return result.TxnType; }
        set { SetTxnType(value); }
      }
      public Builder SetTxnType(global::com.eze.ezecli.TxnInput.Types.TxnType value) {
        PrepareBuilder();
        result.hasTxnType = true;
        result.txnType_ = value;
        return this;
      }
      public Builder ClearTxnType() {
        PrepareBuilder();
        result.hasTxnType = false;
        result.txnType_ = global::com.eze.ezecli.TxnInput.Types.TxnType.CARD_AUTH;
        return this;
      }
      
      public bool HasAmount {
        get { return result.hasAmount; }
      }
      public double Amount {
        get { return result.Amount; }
        set { SetAmount(value); }
      }
      public Builder SetAmount(double value) {
        PrepareBuilder();
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder ClearAmount() {
        PrepareBuilder();
        result.hasAmount = false;
        result.amount_ = 0D;
        return this;
      }
      
      public bool HasOrderId {
        get { return result.hasOrderId; }
      }
      public string OrderId {
        get { return result.OrderId; }
        set { SetOrderId(value); }
      }
      public Builder SetOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderId = true;
        result.orderId_ = value;
        return this;
      }
      public Builder ClearOrderId() {
        PrepareBuilder();
        result.hasOrderId = false;
        result.orderId_ = "";
        return this;
      }
      
      public bool HasNonce {
        get { return result.hasNonce; }
      }
      public string Nonce {
        get { return result.Nonce; }
        set { SetNonce(value); }
      }
      public Builder SetNonce(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNonce = true;
        result.nonce_ = value;
        return this;
      }
      public Builder ClearNonce() {
        PrepareBuilder();
        result.hasNonce = false;
        result.nonce_ = "";
        return this;
      }
      
      public bool HasCustomerMobile {
        get { return result.hasCustomerMobile; }
      }
      public string CustomerMobile {
        get { return result.CustomerMobile; }
        set { SetCustomerMobile(value); }
      }
      public Builder SetCustomerMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomerMobile = true;
        result.customerMobile_ = value;
        return this;
      }
      public Builder ClearCustomerMobile() {
        PrepareBuilder();
        result.hasCustomerMobile = false;
        result.customerMobile_ = "";
        return this;
      }
      
      public bool HasCustomerEmail {
        get { return result.hasCustomerEmail; }
      }
      public string CustomerEmail {
        get { return result.CustomerEmail; }
        set { SetCustomerEmail(value); }
      }
      public Builder SetCustomerEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomerEmail = true;
        result.customerEmail_ = value;
        return this;
      }
      public Builder ClearCustomerEmail() {
        PrepareBuilder();
        result.hasCustomerEmail = false;
        result.customerEmail_ = "";
        return this;
      }
      
      public bool HasExternalReference2 {
        get { return result.hasExternalReference2; }
      }
      public string ExternalReference2 {
        get { return result.ExternalReference2; }
        set { SetExternalReference2(value); }
      }
      public Builder SetExternalReference2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalReference2 = true;
        result.externalReference2_ = value;
        return this;
      }
      public Builder ClearExternalReference2() {
        PrepareBuilder();
        result.hasExternalReference2 = false;
        result.externalReference2_ = "";
        return this;
      }
      
      public bool HasExternalReference3 {
        get { return result.hasExternalReference3; }
      }
      public string ExternalReference3 {
        get { return result.ExternalReference3; }
        set { SetExternalReference3(value); }
      }
      public Builder SetExternalReference3(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalReference3 = true;
        result.externalReference3_ = value;
        return this;
      }
      public Builder ClearExternalReference3() {
        PrepareBuilder();
        result.hasExternalReference3 = false;
        result.externalReference3_ = "";
        return this;
      }
      
      public bool HasAmountOther {
        get { return result.hasAmountOther; }
      }
      public double AmountOther {
        get { return result.AmountOther; }
        set { SetAmountOther(value); }
      }
      public Builder SetAmountOther(double value) {
        PrepareBuilder();
        result.hasAmountOther = true;
        result.amountOther_ = value;
        return this;
      }
      public Builder ClearAmountOther() {
        PrepareBuilder();
        result.hasAmountOther = false;
        result.amountOther_ = 0D;
        return this;
      }
      
      public bool HasChequeNumber {
        get { return result.hasChequeNumber; }
      }
      public string ChequeNumber {
        get { return result.ChequeNumber; }
        set { SetChequeNumber(value); }
      }
      public Builder SetChequeNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChequeNumber = true;
        result.chequeNumber_ = value;
        return this;
      }
      public Builder ClearChequeNumber() {
        PrepareBuilder();
        result.hasChequeNumber = false;
        result.chequeNumber_ = "";
        return this;
      }
      
      public bool HasBankCode {
        get { return result.hasBankCode; }
      }
      public string BankCode {
        get { return result.BankCode; }
        set { SetBankCode(value); }
      }
      public Builder SetBankCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBankCode = true;
        result.bankCode_ = value;
        return this;
      }
      public Builder ClearBankCode() {
        PrepareBuilder();
        result.hasBankCode = false;
        result.bankCode_ = "";
        return this;
      }
      
      public bool HasChequeDate {
        get { return result.hasChequeDate; }
      }
      public string ChequeDate {
        get { return result.ChequeDate; }
        set { SetChequeDate(value); }
      }
      public Builder SetChequeDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChequeDate = true;
        result.chequeDate_ = value;
        return this;
      }
      public Builder ClearChequeDate() {
        PrepareBuilder();
        result.hasChequeDate = false;
        result.chequeDate_ = "";
        return this;
      }
      
      public bool HasAdditionalData {
        get { return result.hasAdditionalData; }
      }
      public string AdditionalData {
        get { return result.AdditionalData; }
        set { SetAdditionalData(value); }
      }
      public Builder SetAdditionalData(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdditionalData = true;
        result.additionalData_ = value;
        return this;
      }
      public Builder ClearAdditionalData() {
        PrepareBuilder();
        result.hasAdditionalData = false;
        result.additionalData_ = "";
        return this;
      }
      
      public bool HasReceiptType {
        get { return result.hasReceiptType; }
      }
      public string ReceiptType {
        get { return result.ReceiptType; }
        set { SetReceiptType(value); }
      }
      public Builder SetReceiptType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReceiptType = true;
        result.receiptType_ = value;
        return this;
      }
      public Builder ClearReceiptType() {
        PrepareBuilder();
        result.hasReceiptType = false;
        result.receiptType_ = "";
        return this;
      }
    }
    static TxnInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Txn : pb::GeneratedMessage<Txn, Txn.Builder> {
    private Txn() { }
    private static readonly Txn defaultInstance = new Txn().MakeReadOnly();
    private static readonly string[] _txnFieldNames = new string[] { "amount", "authCode", "bankCode", "batchNumber", "cardBrand", "chequeDate", "chequeNumber", "customerMobileNumber", "customerName", "externalReferenceNumber2", "externalReferenceNumber3", "invoiceNumber", "lastFoundDigits", "mid", "orderId", "receiptUrl", "reverseRefNumber", "serverResponse", "settlementStatus", "status", "tid", "timestamp", "transactionId", "txnType", "userAgreement", "voidable" };
    private static readonly uint[] _txnFieldTags = new uint[] { 17, 106, 178, 138, 122, 186, 170, 74, 82, 58, 66, 130, 114, 146, 50, 42, 162, 210, 194, 90, 154, 34, 26, 8, 98, 200 };
    public static Txn DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Txn DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Txn ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_Txn__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Txn, Txn.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_Txn__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum TxnType {
        CARD_AUTH = 0,
        CARD_PRE_AUTH = 1,
        CARD_PRE_AUTH_CONF = 2,
        CASH = 3,
        CHEQUE = 4,
      }
      
    }
    #endregion
    
    public const int TxnTypeFieldNumber = 1;
    private bool hasTxnType;
    private global::com.eze.ezecli.Txn.Types.TxnType txnType_ = global::com.eze.ezecli.Txn.Types.TxnType.CARD_AUTH;
    public bool HasTxnType {
      get { return hasTxnType; }
    }
    public global::com.eze.ezecli.Txn.Types.TxnType TxnType {
      get { return txnType_; }
    }
    
    public const int AmountFieldNumber = 2;
    private bool hasAmount;
    private double amount_;
    public bool HasAmount {
      get { return hasAmount; }
    }
    public double Amount {
      get { return amount_; }
    }
    
    public const int TransactionIdFieldNumber = 3;
    private bool hasTransactionId;
    private string transactionId_ = "";
    public bool HasTransactionId {
      get { return hasTransactionId; }
    }
    public string TransactionId {
      get { return transactionId_; }
    }
    
    public const int TimestampFieldNumber = 4;
    private bool hasTimestamp;
    private string timestamp_ = "";
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public string Timestamp {
      get { return timestamp_; }
    }
    
    public const int ReceiptUrlFieldNumber = 5;
    private bool hasReceiptUrl;
    private string receiptUrl_ = "";
    public bool HasReceiptUrl {
      get { return hasReceiptUrl; }
    }
    public string ReceiptUrl {
      get { return receiptUrl_; }
    }
    
    public const int OrderIdFieldNumber = 6;
    private bool hasOrderId;
    private string orderId_ = "";
    public bool HasOrderId {
      get { return hasOrderId; }
    }
    public string OrderId {
      get { return orderId_; }
    }
    
    public const int ExternalReferenceNumber2FieldNumber = 7;
    private bool hasExternalReferenceNumber2;
    private string externalReferenceNumber2_ = "";
    public bool HasExternalReferenceNumber2 {
      get { return hasExternalReferenceNumber2; }
    }
    public string ExternalReferenceNumber2 {
      get { return externalReferenceNumber2_; }
    }
    
    public const int ExternalReferenceNumber3FieldNumber = 8;
    private bool hasExternalReferenceNumber3;
    private string externalReferenceNumber3_ = "";
    public bool HasExternalReferenceNumber3 {
      get { return hasExternalReferenceNumber3; }
    }
    public string ExternalReferenceNumber3 {
      get { return externalReferenceNumber3_; }
    }
    
    public const int CustomerMobileNumberFieldNumber = 9;
    private bool hasCustomerMobileNumber;
    private string customerMobileNumber_ = "";
    public bool HasCustomerMobileNumber {
      get { return hasCustomerMobileNumber; }
    }
    public string CustomerMobileNumber {
      get { return customerMobileNumber_; }
    }
    
    public const int CustomerNameFieldNumber = 10;
    private bool hasCustomerName;
    private string customerName_ = "";
    public bool HasCustomerName {
      get { return hasCustomerName; }
    }
    public string CustomerName {
      get { return customerName_; }
    }
    
    public const int StatusFieldNumber = 11;
    private bool hasStatus;
    private string status_ = "";
    public bool HasStatus {
      get { return hasStatus; }
    }
    public string Status {
      get { return status_; }
    }
    
    public const int UserAgreementFieldNumber = 12;
    private bool hasUserAgreement;
    private string userAgreement_ = "";
    public bool HasUserAgreement {
      get { return hasUserAgreement; }
    }
    public string UserAgreement {
      get { return userAgreement_; }
    }
    
    public const int AuthCodeFieldNumber = 13;
    private bool hasAuthCode;
    private string authCode_ = "";
    public bool HasAuthCode {
      get { return hasAuthCode; }
    }
    public string AuthCode {
      get { return authCode_; }
    }
    
    public const int LastFoundDigitsFieldNumber = 14;
    private bool hasLastFoundDigits;
    private string lastFoundDigits_ = "";
    public bool HasLastFoundDigits {
      get { return hasLastFoundDigits; }
    }
    public string LastFoundDigits {
      get { return lastFoundDigits_; }
    }
    
    public const int CardBrandFieldNumber = 15;
    private bool hasCardBrand;
    private string cardBrand_ = "";
    public bool HasCardBrand {
      get { return hasCardBrand; }
    }
    public string CardBrand {
      get { return cardBrand_; }
    }
    
    public const int InvoiceNumberFieldNumber = 16;
    private bool hasInvoiceNumber;
    private string invoiceNumber_ = "";
    public bool HasInvoiceNumber {
      get { return hasInvoiceNumber; }
    }
    public string InvoiceNumber {
      get { return invoiceNumber_; }
    }
    
    public const int BatchNumberFieldNumber = 17;
    private bool hasBatchNumber;
    private string batchNumber_ = "";
    public bool HasBatchNumber {
      get { return hasBatchNumber; }
    }
    public string BatchNumber {
      get { return batchNumber_; }
    }
    
    public const int MidFieldNumber = 18;
    private bool hasMid;
    private string mid_ = "";
    public bool HasMid {
      get { return hasMid; }
    }
    public string Mid {
      get { return mid_; }
    }
    
    public const int TidFieldNumber = 19;
    private bool hasTid;
    private string tid_ = "";
    public bool HasTid {
      get { return hasTid; }
    }
    public string Tid {
      get { return tid_; }
    }
    
    public const int ReverseRefNumberFieldNumber = 20;
    private bool hasReverseRefNumber;
    private string reverseRefNumber_ = "";
    public bool HasReverseRefNumber {
      get { return hasReverseRefNumber; }
    }
    public string ReverseRefNumber {
      get { return reverseRefNumber_; }
    }
    
    public const int ChequeNumberFieldNumber = 21;
    private bool hasChequeNumber;
    private string chequeNumber_ = "";
    public bool HasChequeNumber {
      get { return hasChequeNumber; }
    }
    public string ChequeNumber {
      get { return chequeNumber_; }
    }
    
    public const int BankCodeFieldNumber = 22;
    private bool hasBankCode;
    private string bankCode_ = "";
    public bool HasBankCode {
      get { return hasBankCode; }
    }
    public string BankCode {
      get { return bankCode_; }
    }
    
    public const int ChequeDateFieldNumber = 23;
    private bool hasChequeDate;
    private string chequeDate_ = "";
    public bool HasChequeDate {
      get { return hasChequeDate; }
    }
    public string ChequeDate {
      get { return chequeDate_; }
    }
    
    public const int SettlementStatusFieldNumber = 24;
    private bool hasSettlementStatus;
    private string settlementStatus_ = "";
    public bool HasSettlementStatus {
      get { return hasSettlementStatus; }
    }
    public string SettlementStatus {
      get { return settlementStatus_; }
    }
    
    public const int VoidableFieldNumber = 25;
    private bool hasVoidable;
    private bool voidable_;
    public bool HasVoidable {
      get { return hasVoidable; }
    }
    public bool Voidable {
      get { return voidable_; }
    }
    
    public const int ServerResponseFieldNumber = 26;
    private bool hasServerResponse;
    private string serverResponse_ = "";
    public bool HasServerResponse {
      get { return hasServerResponse; }
    }
    public string ServerResponse {
      get { return serverResponse_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTxnType) return false;
        if (!hasAmount) return false;
        if (!hasTransactionId) return false;
        if (!hasTimestamp) return false;
        if (!hasReceiptUrl) return false;
        if (!hasOrderId) return false;
        if (!hasExternalReferenceNumber2) return false;
        if (!hasExternalReferenceNumber3) return false;
        if (!hasCustomerMobileNumber) return false;
        if (!hasCustomerName) return false;
        if (!hasStatus) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _txnFieldNames;
      if (hasTxnType) {
        output.WriteEnum(1, field_names[23], (int) TxnType, TxnType);
      }
      if (hasAmount) {
        output.WriteDouble(2, field_names[0], Amount);
      }
      if (hasTransactionId) {
        output.WriteString(3, field_names[22], TransactionId);
      }
      if (hasTimestamp) {
        output.WriteString(4, field_names[21], Timestamp);
      }
      if (hasReceiptUrl) {
        output.WriteString(5, field_names[15], ReceiptUrl);
      }
      if (hasOrderId) {
        output.WriteString(6, field_names[14], OrderId);
      }
      if (hasExternalReferenceNumber2) {
        output.WriteString(7, field_names[9], ExternalReferenceNumber2);
      }
      if (hasExternalReferenceNumber3) {
        output.WriteString(8, field_names[10], ExternalReferenceNumber3);
      }
      if (hasCustomerMobileNumber) {
        output.WriteString(9, field_names[7], CustomerMobileNumber);
      }
      if (hasCustomerName) {
        output.WriteString(10, field_names[8], CustomerName);
      }
      if (hasStatus) {
        output.WriteString(11, field_names[19], Status);
      }
      if (hasUserAgreement) {
        output.WriteString(12, field_names[24], UserAgreement);
      }
      if (hasAuthCode) {
        output.WriteString(13, field_names[1], AuthCode);
      }
      if (hasLastFoundDigits) {
        output.WriteString(14, field_names[12], LastFoundDigits);
      }
      if (hasCardBrand) {
        output.WriteString(15, field_names[4], CardBrand);
      }
      if (hasInvoiceNumber) {
        output.WriteString(16, field_names[11], InvoiceNumber);
      }
      if (hasBatchNumber) {
        output.WriteString(17, field_names[3], BatchNumber);
      }
      if (hasMid) {
        output.WriteString(18, field_names[13], Mid);
      }
      if (hasTid) {
        output.WriteString(19, field_names[20], Tid);
      }
      if (hasReverseRefNumber) {
        output.WriteString(20, field_names[16], ReverseRefNumber);
      }
      if (hasChequeNumber) {
        output.WriteString(21, field_names[6], ChequeNumber);
      }
      if (hasBankCode) {
        output.WriteString(22, field_names[2], BankCode);
      }
      if (hasChequeDate) {
        output.WriteString(23, field_names[5], ChequeDate);
      }
      if (hasSettlementStatus) {
        output.WriteString(24, field_names[18], SettlementStatus);
      }
      if (hasVoidable) {
        output.WriteBool(25, field_names[25], Voidable);
      }
      if (hasServerResponse) {
        output.WriteString(26, field_names[17], ServerResponse);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTxnType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) TxnType);
        }
        if (hasAmount) {
          size += pb::CodedOutputStream.ComputeDoubleSize(2, Amount);
        }
        if (hasTransactionId) {
          size += pb::CodedOutputStream.ComputeStringSize(3, TransactionId);
        }
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Timestamp);
        }
        if (hasReceiptUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ReceiptUrl);
        }
        if (hasOrderId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, OrderId);
        }
        if (hasExternalReferenceNumber2) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ExternalReferenceNumber2);
        }
        if (hasExternalReferenceNumber3) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ExternalReferenceNumber3);
        }
        if (hasCustomerMobileNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(9, CustomerMobileNumber);
        }
        if (hasCustomerName) {
          size += pb::CodedOutputStream.ComputeStringSize(10, CustomerName);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Status);
        }
        if (hasUserAgreement) {
          size += pb::CodedOutputStream.ComputeStringSize(12, UserAgreement);
        }
        if (hasAuthCode) {
          size += pb::CodedOutputStream.ComputeStringSize(13, AuthCode);
        }
        if (hasLastFoundDigits) {
          size += pb::CodedOutputStream.ComputeStringSize(14, LastFoundDigits);
        }
        if (hasCardBrand) {
          size += pb::CodedOutputStream.ComputeStringSize(15, CardBrand);
        }
        if (hasInvoiceNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(16, InvoiceNumber);
        }
        if (hasBatchNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(17, BatchNumber);
        }
        if (hasMid) {
          size += pb::CodedOutputStream.ComputeStringSize(18, Mid);
        }
        if (hasTid) {
          size += pb::CodedOutputStream.ComputeStringSize(19, Tid);
        }
        if (hasReverseRefNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ReverseRefNumber);
        }
        if (hasChequeNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(21, ChequeNumber);
        }
        if (hasBankCode) {
          size += pb::CodedOutputStream.ComputeStringSize(22, BankCode);
        }
        if (hasChequeDate) {
          size += pb::CodedOutputStream.ComputeStringSize(23, ChequeDate);
        }
        if (hasSettlementStatus) {
          size += pb::CodedOutputStream.ComputeStringSize(24, SettlementStatus);
        }
        if (hasVoidable) {
          size += pb::CodedOutputStream.ComputeBoolSize(25, Voidable);
        }
        if (hasServerResponse) {
          size += pb::CodedOutputStream.ComputeStringSize(26, ServerResponse);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Txn ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Txn ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Txn ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Txn ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Txn ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Txn ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Txn ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Txn ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Txn ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Txn ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Txn MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Txn prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Txn, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Txn cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Txn result;
      
      private Txn PrepareBuilder() {
        if (resultIsReadOnly) {
          Txn original = result;
          result = new Txn();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Txn MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.Txn.Descriptor; }
      }
      
      public override Txn DefaultInstanceForType {
        get { return global::com.eze.ezecli.Txn.DefaultInstance; }
      }
      
      public override Txn BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Txn) {
          return MergeFrom((Txn) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Txn other) {
        if (other == global::com.eze.ezecli.Txn.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTxnType) {
          TxnType = other.TxnType;
        }
        if (other.HasAmount) {
          Amount = other.Amount;
        }
        if (other.HasTransactionId) {
          TransactionId = other.TransactionId;
        }
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasReceiptUrl) {
          ReceiptUrl = other.ReceiptUrl;
        }
        if (other.HasOrderId) {
          OrderId = other.OrderId;
        }
        if (other.HasExternalReferenceNumber2) {
          ExternalReferenceNumber2 = other.ExternalReferenceNumber2;
        }
        if (other.HasExternalReferenceNumber3) {
          ExternalReferenceNumber3 = other.ExternalReferenceNumber3;
        }
        if (other.HasCustomerMobileNumber) {
          CustomerMobileNumber = other.CustomerMobileNumber;
        }
        if (other.HasCustomerName) {
          CustomerName = other.CustomerName;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasUserAgreement) {
          UserAgreement = other.UserAgreement;
        }
        if (other.HasAuthCode) {
          AuthCode = other.AuthCode;
        }
        if (other.HasLastFoundDigits) {
          LastFoundDigits = other.LastFoundDigits;
        }
        if (other.HasCardBrand) {
          CardBrand = other.CardBrand;
        }
        if (other.HasInvoiceNumber) {
          InvoiceNumber = other.InvoiceNumber;
        }
        if (other.HasBatchNumber) {
          BatchNumber = other.BatchNumber;
        }
        if (other.HasMid) {
          Mid = other.Mid;
        }
        if (other.HasTid) {
          Tid = other.Tid;
        }
        if (other.HasReverseRefNumber) {
          ReverseRefNumber = other.ReverseRefNumber;
        }
        if (other.HasChequeNumber) {
          ChequeNumber = other.ChequeNumber;
        }
        if (other.HasBankCode) {
          BankCode = other.BankCode;
        }
        if (other.HasChequeDate) {
          ChequeDate = other.ChequeDate;
        }
        if (other.HasSettlementStatus) {
          SettlementStatus = other.SettlementStatus;
        }
        if (other.HasVoidable) {
          Voidable = other.Voidable;
        }
        if (other.HasServerResponse) {
          ServerResponse = other.ServerResponse;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_txnFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _txnFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.txnType_, out unknown)) {
                result.hasTxnType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 17: {
              result.hasAmount = input.ReadDouble(ref result.amount_);
              break;
            }
            case 26: {
              result.hasTransactionId = input.ReadString(ref result.transactionId_);
              break;
            }
            case 34: {
              result.hasTimestamp = input.ReadString(ref result.timestamp_);
              break;
            }
            case 42: {
              result.hasReceiptUrl = input.ReadString(ref result.receiptUrl_);
              break;
            }
            case 50: {
              result.hasOrderId = input.ReadString(ref result.orderId_);
              break;
            }
            case 58: {
              result.hasExternalReferenceNumber2 = input.ReadString(ref result.externalReferenceNumber2_);
              break;
            }
            case 66: {
              result.hasExternalReferenceNumber3 = input.ReadString(ref result.externalReferenceNumber3_);
              break;
            }
            case 74: {
              result.hasCustomerMobileNumber = input.ReadString(ref result.customerMobileNumber_);
              break;
            }
            case 82: {
              result.hasCustomerName = input.ReadString(ref result.customerName_);
              break;
            }
            case 90: {
              result.hasStatus = input.ReadString(ref result.status_);
              break;
            }
            case 98: {
              result.hasUserAgreement = input.ReadString(ref result.userAgreement_);
              break;
            }
            case 106: {
              result.hasAuthCode = input.ReadString(ref result.authCode_);
              break;
            }
            case 114: {
              result.hasLastFoundDigits = input.ReadString(ref result.lastFoundDigits_);
              break;
            }
            case 122: {
              result.hasCardBrand = input.ReadString(ref result.cardBrand_);
              break;
            }
            case 130: {
              result.hasInvoiceNumber = input.ReadString(ref result.invoiceNumber_);
              break;
            }
            case 138: {
              result.hasBatchNumber = input.ReadString(ref result.batchNumber_);
              break;
            }
            case 146: {
              result.hasMid = input.ReadString(ref result.mid_);
              break;
            }
            case 154: {
              result.hasTid = input.ReadString(ref result.tid_);
              break;
            }
            case 162: {
              result.hasReverseRefNumber = input.ReadString(ref result.reverseRefNumber_);
              break;
            }
            case 170: {
              result.hasChequeNumber = input.ReadString(ref result.chequeNumber_);
              break;
            }
            case 178: {
              result.hasBankCode = input.ReadString(ref result.bankCode_);
              break;
            }
            case 186: {
              result.hasChequeDate = input.ReadString(ref result.chequeDate_);
              break;
            }
            case 194: {
              result.hasSettlementStatus = input.ReadString(ref result.settlementStatus_);
              break;
            }
            case 200: {
              result.hasVoidable = input.ReadBool(ref result.voidable_);
              break;
            }
            case 210: {
              result.hasServerResponse = input.ReadString(ref result.serverResponse_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTxnType {
       get { return result.hasTxnType; }
      }
      public global::com.eze.ezecli.Txn.Types.TxnType TxnType {
        get { return result.TxnType; }
        set { SetTxnType(value); }
      }
      public Builder SetTxnType(global::com.eze.ezecli.Txn.Types.TxnType value) {
        PrepareBuilder();
        result.hasTxnType = true;
        result.txnType_ = value;
        return this;
      }
      public Builder ClearTxnType() {
        PrepareBuilder();
        result.hasTxnType = false;
        result.txnType_ = global::com.eze.ezecli.Txn.Types.TxnType.CARD_AUTH;
        return this;
      }
      
      public bool HasAmount {
        get { return result.hasAmount; }
      }
      public double Amount {
        get { return result.Amount; }
        set { SetAmount(value); }
      }
      public Builder SetAmount(double value) {
        PrepareBuilder();
        result.hasAmount = true;
        result.amount_ = value;
        return this;
      }
      public Builder ClearAmount() {
        PrepareBuilder();
        result.hasAmount = false;
        result.amount_ = 0D;
        return this;
      }
      
      public bool HasTransactionId {
        get { return result.hasTransactionId; }
      }
      public string TransactionId {
        get { return result.TransactionId; }
        set { SetTransactionId(value); }
      }
      public Builder SetTransactionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransactionId = true;
        result.transactionId_ = value;
        return this;
      }
      public Builder ClearTransactionId() {
        PrepareBuilder();
        result.hasTransactionId = false;
        result.transactionId_ = "";
        return this;
      }
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public string Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = "";
        return this;
      }
      
      public bool HasReceiptUrl {
        get { return result.hasReceiptUrl; }
      }
      public string ReceiptUrl {
        get { return result.ReceiptUrl; }
        set { SetReceiptUrl(value); }
      }
      public Builder SetReceiptUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReceiptUrl = true;
        result.receiptUrl_ = value;
        return this;
      }
      public Builder ClearReceiptUrl() {
        PrepareBuilder();
        result.hasReceiptUrl = false;
        result.receiptUrl_ = "";
        return this;
      }
      
      public bool HasOrderId {
        get { return result.hasOrderId; }
      }
      public string OrderId {
        get { return result.OrderId; }
        set { SetOrderId(value); }
      }
      public Builder SetOrderId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOrderId = true;
        result.orderId_ = value;
        return this;
      }
      public Builder ClearOrderId() {
        PrepareBuilder();
        result.hasOrderId = false;
        result.orderId_ = "";
        return this;
      }
      
      public bool HasExternalReferenceNumber2 {
        get { return result.hasExternalReferenceNumber2; }
      }
      public string ExternalReferenceNumber2 {
        get { return result.ExternalReferenceNumber2; }
        set { SetExternalReferenceNumber2(value); }
      }
      public Builder SetExternalReferenceNumber2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalReferenceNumber2 = true;
        result.externalReferenceNumber2_ = value;
        return this;
      }
      public Builder ClearExternalReferenceNumber2() {
        PrepareBuilder();
        result.hasExternalReferenceNumber2 = false;
        result.externalReferenceNumber2_ = "";
        return this;
      }
      
      public bool HasExternalReferenceNumber3 {
        get { return result.hasExternalReferenceNumber3; }
      }
      public string ExternalReferenceNumber3 {
        get { return result.ExternalReferenceNumber3; }
        set { SetExternalReferenceNumber3(value); }
      }
      public Builder SetExternalReferenceNumber3(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExternalReferenceNumber3 = true;
        result.externalReferenceNumber3_ = value;
        return this;
      }
      public Builder ClearExternalReferenceNumber3() {
        PrepareBuilder();
        result.hasExternalReferenceNumber3 = false;
        result.externalReferenceNumber3_ = "";
        return this;
      }
      
      public bool HasCustomerMobileNumber {
        get { return result.hasCustomerMobileNumber; }
      }
      public string CustomerMobileNumber {
        get { return result.CustomerMobileNumber; }
        set { SetCustomerMobileNumber(value); }
      }
      public Builder SetCustomerMobileNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomerMobileNumber = true;
        result.customerMobileNumber_ = value;
        return this;
      }
      public Builder ClearCustomerMobileNumber() {
        PrepareBuilder();
        result.hasCustomerMobileNumber = false;
        result.customerMobileNumber_ = "";
        return this;
      }
      
      public bool HasCustomerName {
        get { return result.hasCustomerName; }
      }
      public string CustomerName {
        get { return result.CustomerName; }
        set { SetCustomerName(value); }
      }
      public Builder SetCustomerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomerName = true;
        result.customerName_ = value;
        return this;
      }
      public Builder ClearCustomerName() {
        PrepareBuilder();
        result.hasCustomerName = false;
        result.customerName_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public string Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = "";
        return this;
      }
      
      public bool HasUserAgreement {
        get { return result.hasUserAgreement; }
      }
      public string UserAgreement {
        get { return result.UserAgreement; }
        set { SetUserAgreement(value); }
      }
      public Builder SetUserAgreement(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserAgreement = true;
        result.userAgreement_ = value;
        return this;
      }
      public Builder ClearUserAgreement() {
        PrepareBuilder();
        result.hasUserAgreement = false;
        result.userAgreement_ = "";
        return this;
      }
      
      public bool HasAuthCode {
        get { return result.hasAuthCode; }
      }
      public string AuthCode {
        get { return result.AuthCode; }
        set { SetAuthCode(value); }
      }
      public Builder SetAuthCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthCode = true;
        result.authCode_ = value;
        return this;
      }
      public Builder ClearAuthCode() {
        PrepareBuilder();
        result.hasAuthCode = false;
        result.authCode_ = "";
        return this;
      }
      
      public bool HasLastFoundDigits {
        get { return result.hasLastFoundDigits; }
      }
      public string LastFoundDigits {
        get { return result.LastFoundDigits; }
        set { SetLastFoundDigits(value); }
      }
      public Builder SetLastFoundDigits(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastFoundDigits = true;
        result.lastFoundDigits_ = value;
        return this;
      }
      public Builder ClearLastFoundDigits() {
        PrepareBuilder();
        result.hasLastFoundDigits = false;
        result.lastFoundDigits_ = "";
        return this;
      }
      
      public bool HasCardBrand {
        get { return result.hasCardBrand; }
      }
      public string CardBrand {
        get { return result.CardBrand; }
        set { SetCardBrand(value); }
      }
      public Builder SetCardBrand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCardBrand = true;
        result.cardBrand_ = value;
        return this;
      }
      public Builder ClearCardBrand() {
        PrepareBuilder();
        result.hasCardBrand = false;
        result.cardBrand_ = "";
        return this;
      }
      
      public bool HasInvoiceNumber {
        get { return result.hasInvoiceNumber; }
      }
      public string InvoiceNumber {
        get { return result.InvoiceNumber; }
        set { SetInvoiceNumber(value); }
      }
      public Builder SetInvoiceNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInvoiceNumber = true;
        result.invoiceNumber_ = value;
        return this;
      }
      public Builder ClearInvoiceNumber() {
        PrepareBuilder();
        result.hasInvoiceNumber = false;
        result.invoiceNumber_ = "";
        return this;
      }
      
      public bool HasBatchNumber {
        get { return result.hasBatchNumber; }
      }
      public string BatchNumber {
        get { return result.BatchNumber; }
        set { SetBatchNumber(value); }
      }
      public Builder SetBatchNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBatchNumber = true;
        result.batchNumber_ = value;
        return this;
      }
      public Builder ClearBatchNumber() {
        PrepareBuilder();
        result.hasBatchNumber = false;
        result.batchNumber_ = "";
        return this;
      }
      
      public bool HasMid {
        get { return result.hasMid; }
      }
      public string Mid {
        get { return result.Mid; }
        set { SetMid(value); }
      }
      public Builder SetMid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMid = true;
        result.mid_ = value;
        return this;
      }
      public Builder ClearMid() {
        PrepareBuilder();
        result.hasMid = false;
        result.mid_ = "";
        return this;
      }
      
      public bool HasTid {
        get { return result.hasTid; }
      }
      public string Tid {
        get { return result.Tid; }
        set { SetTid(value); }
      }
      public Builder SetTid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTid = true;
        result.tid_ = value;
        return this;
      }
      public Builder ClearTid() {
        PrepareBuilder();
        result.hasTid = false;
        result.tid_ = "";
        return this;
      }
      
      public bool HasReverseRefNumber {
        get { return result.hasReverseRefNumber; }
      }
      public string ReverseRefNumber {
        get { return result.ReverseRefNumber; }
        set { SetReverseRefNumber(value); }
      }
      public Builder SetReverseRefNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReverseRefNumber = true;
        result.reverseRefNumber_ = value;
        return this;
      }
      public Builder ClearReverseRefNumber() {
        PrepareBuilder();
        result.hasReverseRefNumber = false;
        result.reverseRefNumber_ = "";
        return this;
      }
      
      public bool HasChequeNumber {
        get { return result.hasChequeNumber; }
      }
      public string ChequeNumber {
        get { return result.ChequeNumber; }
        set { SetChequeNumber(value); }
      }
      public Builder SetChequeNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChequeNumber = true;
        result.chequeNumber_ = value;
        return this;
      }
      public Builder ClearChequeNumber() {
        PrepareBuilder();
        result.hasChequeNumber = false;
        result.chequeNumber_ = "";
        return this;
      }
      
      public bool HasBankCode {
        get { return result.hasBankCode; }
      }
      public string BankCode {
        get { return result.BankCode; }
        set { SetBankCode(value); }
      }
      public Builder SetBankCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBankCode = true;
        result.bankCode_ = value;
        return this;
      }
      public Builder ClearBankCode() {
        PrepareBuilder();
        result.hasBankCode = false;
        result.bankCode_ = "";
        return this;
      }
      
      public bool HasChequeDate {
        get { return result.hasChequeDate; }
      }
      public string ChequeDate {
        get { return result.ChequeDate; }
        set { SetChequeDate(value); }
      }
      public Builder SetChequeDate(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChequeDate = true;
        result.chequeDate_ = value;
        return this;
      }
      public Builder ClearChequeDate() {
        PrepareBuilder();
        result.hasChequeDate = false;
        result.chequeDate_ = "";
        return this;
      }
      
      public bool HasSettlementStatus {
        get { return result.hasSettlementStatus; }
      }
      public string SettlementStatus {
        get { return result.SettlementStatus; }
        set { SetSettlementStatus(value); }
      }
      public Builder SetSettlementStatus(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSettlementStatus = true;
        result.settlementStatus_ = value;
        return this;
      }
      public Builder ClearSettlementStatus() {
        PrepareBuilder();
        result.hasSettlementStatus = false;
        result.settlementStatus_ = "";
        return this;
      }
      
      public bool HasVoidable {
        get { return result.hasVoidable; }
      }
      public bool Voidable {
        get { return result.Voidable; }
        set { SetVoidable(value); }
      }
      public Builder SetVoidable(bool value) {
        PrepareBuilder();
        result.hasVoidable = true;
        result.voidable_ = value;
        return this;
      }
      public Builder ClearVoidable() {
        PrepareBuilder();
        result.hasVoidable = false;
        result.voidable_ = false;
        return this;
      }
      
      public bool HasServerResponse {
        get { return result.hasServerResponse; }
      }
      public string ServerResponse {
        get { return result.ServerResponse; }
        set { SetServerResponse(value); }
      }
      public Builder SetServerResponse(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerResponse = true;
        result.serverResponse_ = value;
        return this;
      }
      public Builder ClearServerResponse() {
        PrepareBuilder();
        result.hasServerResponse = false;
        result.serverResponse_ = "";
        return this;
      }
    }
    static Txn() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TxnStatusInput : pb::GeneratedMessage<TxnStatusInput, TxnStatusInput.Builder> {
    private TxnStatusInput() { }
    private static readonly TxnStatusInput defaultInstance = new TxnStatusInput().MakeReadOnly();
    private static readonly string[] _txnStatusInputFieldNames = new string[] { "nonce" };
    private static readonly uint[] _txnStatusInputFieldTags = new uint[] { 10 };
    public static TxnStatusInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TxnStatusInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TxnStatusInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnStatusInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TxnStatusInput, TxnStatusInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_TxnStatusInput__FieldAccessorTable; }
    }
    
    public const int NonceFieldNumber = 1;
    private bool hasNonce;
    private string nonce_ = "";
    public bool HasNonce {
      get { return hasNonce; }
    }
    public string Nonce {
      get { return nonce_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNonce) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _txnStatusInputFieldNames;
      if (hasNonce) {
        output.WriteString(1, field_names[0], Nonce);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNonce) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Nonce);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TxnStatusInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnStatusInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnStatusInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TxnStatusInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TxnStatusInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnStatusInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TxnStatusInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TxnStatusInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TxnStatusInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TxnStatusInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TxnStatusInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TxnStatusInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TxnStatusInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TxnStatusInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TxnStatusInput result;
      
      private TxnStatusInput PrepareBuilder() {
        if (resultIsReadOnly) {
          TxnStatusInput original = result;
          result = new TxnStatusInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TxnStatusInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.TxnStatusInput.Descriptor; }
      }
      
      public override TxnStatusInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.TxnStatusInput.DefaultInstance; }
      }
      
      public override TxnStatusInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TxnStatusInput) {
          return MergeFrom((TxnStatusInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TxnStatusInput other) {
        if (other == global::com.eze.ezecli.TxnStatusInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNonce) {
          Nonce = other.Nonce;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_txnStatusInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _txnStatusInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasNonce = input.ReadString(ref result.nonce_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNonce {
        get { return result.hasNonce; }
      }
      public string Nonce {
        get { return result.Nonce; }
        set { SetNonce(value); }
      }
      public Builder SetNonce(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNonce = true;
        result.nonce_ = value;
        return this;
      }
      public Builder ClearNonce() {
        PrepareBuilder();
        result.hasNonce = false;
        result.nonce_ = "";
        return this;
      }
    }
    static TxnStatusInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VoidTxnInput : pb::GeneratedMessage<VoidTxnInput, VoidTxnInput.Builder> {
    private VoidTxnInput() { }
    private static readonly VoidTxnInput defaultInstance = new VoidTxnInput().MakeReadOnly();
    private static readonly string[] _voidTxnInputFieldNames = new string[] { "txnId" };
    private static readonly uint[] _voidTxnInputFieldTags = new uint[] { 10 };
    public static VoidTxnInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VoidTxnInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VoidTxnInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_VoidTxnInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VoidTxnInput, VoidTxnInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_VoidTxnInput__FieldAccessorTable; }
    }
    
    public const int TxnIdFieldNumber = 1;
    private bool hasTxnId;
    private string txnId_ = "";
    public bool HasTxnId {
      get { return hasTxnId; }
    }
    public string TxnId {
      get { return txnId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTxnId) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _voidTxnInputFieldNames;
      if (hasTxnId) {
        output.WriteString(1, field_names[0], TxnId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTxnId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, TxnId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VoidTxnInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VoidTxnInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VoidTxnInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VoidTxnInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VoidTxnInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VoidTxnInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VoidTxnInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VoidTxnInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VoidTxnInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VoidTxnInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VoidTxnInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VoidTxnInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<VoidTxnInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VoidTxnInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VoidTxnInput result;
      
      private VoidTxnInput PrepareBuilder() {
        if (resultIsReadOnly) {
          VoidTxnInput original = result;
          result = new VoidTxnInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VoidTxnInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.VoidTxnInput.Descriptor; }
      }
      
      public override VoidTxnInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.VoidTxnInput.DefaultInstance; }
      }
      
      public override VoidTxnInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VoidTxnInput) {
          return MergeFrom((VoidTxnInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VoidTxnInput other) {
        if (other == global::com.eze.ezecli.VoidTxnInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTxnId) {
          TxnId = other.TxnId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_voidTxnInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _voidTxnInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTxnId = input.ReadString(ref result.txnId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTxnId {
        get { return result.hasTxnId; }
      }
      public string TxnId {
        get { return result.TxnId; }
        set { SetTxnId(value); }
      }
      public Builder SetTxnId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTxnId = true;
        result.txnId_ = value;
        return this;
      }
      public Builder ClearTxnId() {
        PrepareBuilder();
        result.hasTxnId = false;
        result.txnId_ = "";
        return this;
      }
    }
    static VoidTxnInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ServerTypeInput : pb::GeneratedMessage<ServerTypeInput, ServerTypeInput.Builder> {
    private ServerTypeInput() { }
    private static readonly ServerTypeInput defaultInstance = new ServerTypeInput().MakeReadOnly();
    private static readonly string[] _serverTypeInputFieldNames = new string[] { "servertype" };
    private static readonly uint[] _serverTypeInputFieldTags = new uint[] { 8 };
    public static ServerTypeInput DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ServerTypeInput DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ServerTypeInput ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ServerTypeInput__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ServerTypeInput, ServerTypeInput.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_ServerTypeInput__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ServerType {
        SERVER_TYPE_DEMO = 0,
        SERVER_TYPE_PROD = 1,
      }
      
    }
    #endregion
    
    public const int ServertypeFieldNumber = 1;
    private bool hasServertype;
    private global::com.eze.ezecli.ServerTypeInput.Types.ServerType servertype_ = global::com.eze.ezecli.ServerTypeInput.Types.ServerType.SERVER_TYPE_DEMO;
    public bool HasServertype {
      get { return hasServertype; }
    }
    public global::com.eze.ezecli.ServerTypeInput.Types.ServerType Servertype {
      get { return servertype_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasServertype) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _serverTypeInputFieldNames;
      if (hasServertype) {
        output.WriteEnum(1, field_names[0], (int) Servertype, Servertype);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServertype) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Servertype);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ServerTypeInput ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerTypeInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerTypeInput ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ServerTypeInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ServerTypeInput ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerTypeInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ServerTypeInput ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ServerTypeInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ServerTypeInput ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ServerTypeInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ServerTypeInput MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ServerTypeInput prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ServerTypeInput, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ServerTypeInput cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ServerTypeInput result;
      
      private ServerTypeInput PrepareBuilder() {
        if (resultIsReadOnly) {
          ServerTypeInput original = result;
          result = new ServerTypeInput();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ServerTypeInput MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.ServerTypeInput.Descriptor; }
      }
      
      public override ServerTypeInput DefaultInstanceForType {
        get { return global::com.eze.ezecli.ServerTypeInput.DefaultInstance; }
      }
      
      public override ServerTypeInput BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ServerTypeInput) {
          return MergeFrom((ServerTypeInput) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ServerTypeInput other) {
        if (other == global::com.eze.ezecli.ServerTypeInput.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServertype) {
          Servertype = other.Servertype;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_serverTypeInputFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _serverTypeInputFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.servertype_, out unknown)) {
                result.hasServertype = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasServertype {
       get { return result.hasServertype; }
      }
      public global::com.eze.ezecli.ServerTypeInput.Types.ServerType Servertype {
        get { return result.Servertype; }
        set { SetServertype(value); }
      }
      public Builder SetServertype(global::com.eze.ezecli.ServerTypeInput.Types.ServerType value) {
        PrepareBuilder();
        result.hasServertype = true;
        result.servertype_ = value;
        return this;
      }
      public Builder ClearServertype() {
        PrepareBuilder();
        result.hasServertype = false;
        result.servertype_ = global::com.eze.ezecli.ServerTypeInput.Types.ServerType.SERVER_TYPE_DEMO;
        return this;
      }
    }
    static ServerTypeInput() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AppInfo : pb::GeneratedMessage<AppInfo, AppInfo.Builder> {
    private AppInfo() { }
    private static readonly AppInfo defaultInstance = new AppInfo().MakeReadOnly();
    private static readonly string[] _appInfoFieldNames = new string[] { "appname", "appversion" };
    private static readonly uint[] _appInfoFieldTags = new uint[] { 10, 18 };
    public static AppInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AppInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AppInfo ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_AppInfo__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AppInfo, AppInfo.Builder> InternalFieldAccessors {
      get { return global::com.eze.ezecli.Ezetap.internal__static_com_eze_ezecli_AppInfo__FieldAccessorTable; }
    }
    
    public const int AppnameFieldNumber = 1;
    private bool hasAppname;
    private string appname_ = "";
    public bool HasAppname {
      get { return hasAppname; }
    }
    public string Appname {
      get { return appname_; }
    }
    
    public const int AppversionFieldNumber = 2;
    private bool hasAppversion;
    private string appversion_ = "";
    public bool HasAppversion {
      get { return hasAppversion; }
    }
    public string Appversion {
      get { return appversion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAppname) return false;
        if (!hasAppversion) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _appInfoFieldNames;
      if (hasAppname) {
        output.WriteString(1, field_names[0], Appname);
      }
      if (hasAppversion) {
        output.WriteString(2, field_names[1], Appversion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAppname) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Appname);
        }
        if (hasAppversion) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Appversion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AppInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AppInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AppInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AppInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AppInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AppInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AppInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AppInfo MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AppInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AppInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AppInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AppInfo result;
      
      private AppInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          AppInfo original = result;
          result = new AppInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AppInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::com.eze.ezecli.AppInfo.Descriptor; }
      }
      
      public override AppInfo DefaultInstanceForType {
        get { return global::com.eze.ezecli.AppInfo.DefaultInstance; }
      }
      
      public override AppInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AppInfo) {
          return MergeFrom((AppInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AppInfo other) {
        if (other == global::com.eze.ezecli.AppInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAppname) {
          Appname = other.Appname;
        }
        if (other.HasAppversion) {
          Appversion = other.Appversion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_appInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _appInfoFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAppname = input.ReadString(ref result.appname_);
              break;
            }
            case 18: {
              result.hasAppversion = input.ReadString(ref result.appversion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAppname {
        get { return result.hasAppname; }
      }
      public string Appname {
        get { return result.Appname; }
        set { SetAppname(value); }
      }
      public Builder SetAppname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppname = true;
        result.appname_ = value;
        return this;
      }
      public Builder ClearAppname() {
        PrepareBuilder();
        result.hasAppname = false;
        result.appname_ = "";
        return this;
      }
      
      public bool HasAppversion {
        get { return result.hasAppversion; }
      }
      public string Appversion {
        get { return result.Appversion; }
        set { SetAppversion(value); }
      }
      public Builder SetAppversion(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppversion = true;
        result.appversion_ = value;
        return this;
      }
      public Builder ClearAppversion() {
        PrepareBuilder();
        result.hasAppversion = false;
        result.appversion_ = "";
        return this;
      }
    }
    static AppInfo() {
      object.ReferenceEquals(global::com.eze.ezecli.Ezetap.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
